<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马树菌的博客驿站</title>
  
  <subtitle>https://v1.jinrishici.com/all.png</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lesliewong.cn/"/>
  <updated>2024-08-21T11:05:42.275Z</updated>
  <id>http://lesliewong.cn/</id>
  
  <author>
    <name>爱冒泡的马树菌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>象征主义画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/11/symbolism-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/11/symbolism-western-aesthetic-ios/</id>
    <published>2024-08-11T15:07:30.000Z</published>
    <updated>2024-08-21T11:05:42.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="夏凡纳"><a href="#夏凡纳" class="headerlink" title="夏凡纳"></a>夏凡纳</h3><p>苍白骑士：夏凡纳 Pierre Puvis de Chevannes 1824 ~ 1898 French</p><a id="more"></a><p>夏凡纳为十九世纪后半叶法国最前卫的装饰画画家，被很多其他派别的画者公开地赞赏，通常被归为象征主义者，实质上他是独立的而不归属于任何派别的。</p><p>夏凡纳生于法国里昂，年轻时喜欢科学，也学过法律，但由于生病而课业中断。在去了意大利后，喜欢上壁画，回国后，就立志当画家，最后成为著名的装饰壁画家。除了壁画外，他也画了不少油画，他画油画多采用象征手法，用色苍白，线条强而单纯。</p><p><img src="https://image-static.segmentfault.com/272/212/2722127412-66c5c4e8bcbab" alt="图片" style="zoom:50%;"></p><hr><h3 id="莫罗"><a href="#莫罗" class="headerlink" title="莫罗"></a>莫罗</h3><p>莎乐美的秘密花园：莫罗 Gustave Moreau 1826 ~ 1898 French</p><p>出生于巴黎，其父是一个建筑师。他是马蒂斯和乔治·鲁奥在巴黎高等美术学院的老师。</p><p>他的许多作品取材于希腊神话和圣经故事，为了强调神秘感和幻想感，他使用了精密的细节和已被确认的人物形象，他还用油彩创作了许多抽象和半抽象的素描。</p><p><img src="https://image-static.segmentfault.com/218/207/2182079272-66c5c4f4d9f75" alt="图片" style="zoom:50%;"></p><hr><h3 id="雷东"><a href="#雷东" class="headerlink" title="雷东"></a>雷东</h3><p>梦幻王子：雷东 Odilon Redon 1840 ~ 1916 French</p><p>法国画家，一位突出的象征主义者，50岁以前，基本上他是活在黑白的自我世界里，为不欢愉的。</p><p>雷东用一生来演绎艺术和人生不可分割的真理，他在自传《我自己》中写道：“我使艺术和自己一致。” 这是他艺术风格独特于他人的本质所在：雷东的艺术反映了雷东本人的精神世界。</p><p><img src="https://image-static.segmentfault.com/402/647/4026478210-66c5c50020c17" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;夏凡纳&quot;&gt;&lt;a href=&quot;#夏凡纳&quot; class=&quot;headerlink&quot; title=&quot;夏凡纳&quot;&gt;&lt;/a&gt;夏凡纳&lt;/h3&gt;&lt;p&gt;苍白骑士：夏凡纳 Pierre Puvis de Chevannes 1824 ~ 1898 French&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>写实主义画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/11/realism-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/11/realism-western-aesthetic-ios/</id>
    <published>2024-08-11T15:07:30.000Z</published>
    <updated>2024-08-21T11:05:47.783Z</updated>
    
    <content type="html"><![CDATA[<h3 id="库尔贝"><a href="#库尔贝" class="headerlink" title="库尔贝"></a>库尔贝</h3><p>写实主义旗手：库尔贝 Gustave Courbet 1819 ~ 1877 French</p><a id="more"></a><p>1819年生于法国的奥尔南，自幼天赋聪颖、相貌出众，既高傲自大、自命不凡，又热情奔放、慷慨大方，从中学时代起就成为同龄朋友们心悦诚服的领袖。</p><p>1841年，他的父亲送他到巴黎念大学，要他学习法律，但他却立志做一名画家，在皇家美术学院和贝桑松美术学院学习。当他23岁时就已掌握了自己风格的主要因素。在古代大师中，他最欣赏17世纪西班牙画家委拉斯开兹的技巧，专心地临摹过不少收藏在卢浮宫的委拉斯开兹的作品。</p><p>1855年当他巨大的画作The Artist’s Studio被展览场拒绝时，仍大胆地自行展示于会场旁。晚年被控诉破坏拿破仑的凯旋门而下狱，1873年获释后到瑞士，直到1877年去世前，仍不间断地继续作画。</p><p><img src="https://image-static.segmentfault.com/327/155/327155883-66c5c6b47ec6b" alt="图片" style="zoom:50%;"></p><hr><h3 id="杜米埃"><a href="#杜米埃" class="headerlink" title="杜米埃"></a>杜米埃</h3><p>写实主义：杜米埃 Honore Daumier 1808 ~ 1879 French</p><p>法国漫画家、画家和雕刻家，以创作政治讽刺题材的绘画而得名。他具有激进、革命的思想，表现在创作上则是敢于运用自由、大胆、“创造性”的各种材料，让世人钦佩，奉他为20世纪最伟大的表现派画家。</p><p>他做的雕塑作品，同样以独特的宽松而自由的创作技法，极其粗犷、泼辣的艺术风格进行创作，根据需要将头和身体给以高度的漫化、夸张，而整个形态仍旧十分自然，且充分表达出人物的个性。</p><p>他所塑造的大多是法兰西共和国的诸多高端人物。他们都是画家所熟悉的，总共创作了独树一帜的讽刺性雕塑作品36件。这些作品的原形都是当时法国的高层人物：法兰西议员、部长、市长、将军、学者和银行家等等。作品大部分是彩塑，更增加了它们的观赏性。</p><p>因讽刺政府而被监押，之后转为创作讽刺社会的作品，1848年革命时期又转向政治，自谓有超过4000篇的作品，每一篇都可能是他的最后一篇，晚年穷困而不得不接受柯罗的赞助。</p><p>虽然从未销售出任何的画作，但当代的画家们却非常赏识并乐于收集其画作，尤其是德加。</p><p><img src="https://image-static.segmentfault.com/168/332/1683324176-66c5c6c0294e5" alt="图片" style="zoom:50%;"></p><hr><h3 id="埃金斯"><a href="#埃金斯" class="headerlink" title="埃金斯"></a>埃金斯</h3><p>写实主义：埃金斯 Thomas Eakins 1844 ~ 1916 American</p><p>美国现实主义画家、摄影家、雕塑家及艺术教育家，被誉为美国绘画之父。1866年至1868年，他在巴黎美术学院随让-莱昂·热罗姆学习，1869年往西班牙，接触了委拉斯开兹和里贝拉等的作品，受到学院派和古典风格的影响。</p><p>1870年回费城，居于父母的家中，为亲人画了不少肖像画，亦画了一些户外活动的片段如划艇。1876年开始于母校宾州美术学校任教，1882年担任教导主任。</p><p>1883年曾以自己为模特儿，摄下了七张不同姿势的裸体照，亦以学生为模特儿摄下了一些作品，以供学生学习。他的使用裸体真人的教学方法在当时备受争议，这也使他和校方的关系在他整个教学生涯中一直处于紧张状态，最终1886年他因在一个男女混合班上使用裸体男模特儿而遭解雇。埃金斯被解雇后，其学生组成费城艺术学生联盟（Art Students’ League of Philadelphia），继续随他学习。</p><p>由于其父的财务支持他才能继续自己的工作，但大部分时间皆处于困苦的境地。其最有名的作品当属The Gross Clinic （Jefferson Medical Coll.，Philadelphia，1875）。他的理论走在当代的先锋，于1916年6月卒于费城。</p><p><img src="https://image-static.segmentfault.com/132/425/132425811-66c5c6cab8dd1" alt="图片" style="zoom:50%;"></p><hr><h3 id="萨金特"><a href="#萨金特" class="headerlink" title="萨金特"></a>萨金特</h3><p>肖像画名家：萨金特 John Singer Sargent 1856 ~ 1925 America</p><p>美国艺术家，因为描绘了爱德华时代的奢华，所以是“当时的领军肖像画家”。他在一生中创作了900幅油画，2000多幅水彩画，以及无数幅素描画、炭笔画，他的画作描绘了他游历世界各地时的所见所闻。</p><p>萨金特的父母皆为美国人，不过他迁居伦敦之前，都在巴黎接受训练。1881年萨金特荣获沙龙银奖，但1884年其肖像画《X夫人》在法国却遭到强烈抨击，萨金特一怒之下离开了巴黎，定居伦敦。</p><p>1897年他成为皇家美术学院院士，1907年他拒受爵士位，因为他自称是美国人，所以在英国水彩画史和美国的画家介绍中都有萨金特。</p><p>萨金特的绘画技巧，尤其是他后来被人推崇备至的笔触，在一开始就显得相当出色。他的肖像画带有雄伟风格，而非正式的手稿和风景画，则可看到印象主义的影响。</p><p>萨金特进入晚年后，开始对肖像画创作的规条产生矛盾情感，转向壁画和外光主义画作创作，大半生都在欧洲度过。</p><p><img src="https://image-static.segmentfault.com/206/722/2067229234-66c5c6d45834d" alt="图片" style="zoom:50%;"></p><hr><h3 id="柯罗"><a href="#柯罗" class="headerlink" title="柯罗"></a>柯罗</h3><p>形色枫丹白露：柯罗 Jean Baptiste Camille Corot 1796 ~ 1875 French</p><p>著名的法国风景画家，他喜欢旅行，1826年至1828年首次到意大利留学。回国后，在枫丹白露、布列塔尼等地旅行，在巴比松小住，确立了他抒情风景画派的基本风格。</p><p>柯罗的风景画，在色彩运用方面，用的最多的是银灰色和褐色调子，因这类色彩具有宁静感，能使灿烂的阳光或弥漫的晨雾展现得更富诗意。</p><p>柯罗十分热爱大自然，他曾说：”艺术就是，当你画风景时，要先找到形，然后找到色，使色度之间很好地联系起来，这就叫做色彩，这也就是现实，但这一切要服从于你的感情。“</p><p>同卢梭、米勒等画家一样，柯罗在对大自然的讴歌中，展现了自己温柔多情的性格。他毕生徜徉在大自然中，着意临摹自然界的神奇与曼妙，他将大自然造化的一切进行艺术的再现。他的风景画，尽显自然之美、田园之美，既融合了古典主义的典雅，又荡漾着理想主义的浪漫，还蕴涵着现实主义的真切，他被公认为是19世纪最伟大的风景画家之一。</p><p>1875年柯罗在巴黎去世，这位终生未婚、独自拥抱绘画艺术的老人，直到生命将尽，手里仍握着画笔。</p><p><img src="https://image-static.segmentfault.com/289/419/2894199026-66c5c6de7b6ed" alt="图片" style="zoom:50%;"></p><hr><h3 id="米勒"><a href="#米勒" class="headerlink" title="米勒"></a>米勒</h3><p>圣化农民与土地的大师：米勒 Jean Francois Millet 1814 ~ 1875 French</p><p>米勒是法国近代绘画史上最受人民爱戴的画家，他那淳朴亲切的艺术语言，尤其被广大法国农民所喜爱。他出身于农民世家，幼年时便显露出绘画的天才，受到老师的鼓励而立志学习绘画。如同卢梭、柯罗等风景画家发现了平凡的自然界的诗情画意一般，米勒也发现了平凡的劳动者的诗情画意。不过，他笔下的农夫并不是天国中的亚当和夏娃，他们是疲惫、穷苦、终日操劳的贫困者，衣衫褴褛，肌肤黝黑，佝偻的身躯，粗大的手掌，这便是米勒的美学，这便是米勒要为之呕心沥血地歌颂的法兰西农民的形象。</p><p>正如罗曼罗兰所言，”他们日复一日地劳动，来养育这伟大的民族，他们日复一日地劳动，来缔造这美丽的国家。“</p><p>1858年至1859年画出了非常出名的《晚祷》，他的成功应部分归功于对事实的注重。米勒奖励年轻画家，如莫奈、毕沙罗，晚年倾向于印象画风，其对社会的关注态度，对修拉和梵高起很大作用。</p><p><img src="https://image-static.segmentfault.com/523/452/523452670-66c5c6e6ebd62" alt="图片" style="zoom:50%;"></p><hr><h3 id="方丹"><a href="#方丹" class="headerlink" title="方丹"></a>方丹</h3><p>写实主义：方丹 Henri Fantin Latour 1836 ~ 1904 French</p><p>方丹·拉图尔为法国画家，知名于艳丽的花卉及肖像画，他精美的花卉作品，如同格式化印刷那样好，对象征主义画家有很大的影响，例如雷东。他只在巴黎美术学校学习过一年，之后就在卢浮宫里靠临摹大师们的作品为生，如提香、委拉斯开兹和华托，直到普法战争中断为止。</p><p>方丹严谨的写实主义手法极受欢迎，正因为长期临摹，使得他的创作中总是带有某个大师的痕迹，导致他虽然作品甚多而且非常精美，却不被传统艺术界所承认。方丹并不像印象派画家那样痴迷于户外的瞬间光色印象，他不去户外作画，画室才是他的家，所以他的静物画也是其艺术生命中的一个亮点，近代室内装饰往往少不了方丹的静物画。</p><p>十九世纪末，他经常在巴黎美术学院听课，并多次参加法国官方的沙龙展出活动。这就是当时的肖像画家、版画家和插画画家方丹，他在法国的绘画史上是几乎没有什么地位的，但他个人的作品风格却是地地道道的法国学院派式的。尽管其看起来像个忠诚的沙龙画家，却和大部分印象派画家交情不错。方丹是马奈的密友，为马奈创作过许多肖像画。自从他在1867年沙龙展上的马奈肖像画引起人们关注后，他的肖像画便开始流行于世。</p><p>沙龙的评审委员会在当时已相当专制，排斥异己的事情经常发生。他们可以在3000个画家约5000幅作品中，刷掉将近3000幅。落选的画家中有一些是曾经受勋的、可以免审的画家，而年轻的方丹尽管勤奋作画，落选就更不在话下了。</p><p>方丹最初是以版画崭露头角的，他能画一手优美的静物，在群像性肖像画上最有成就。但是沙龙不仅排挤像库尔贝、杜比尼等一些有成就的画家，更会拒绝方丹之辈，后来他不得不以石版画创作为其主要活动。</p><p><img src="https://image-static.segmentfault.com/363/822/3638228447-66c5c6ee6c677" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;库尔贝&quot;&gt;&lt;a href=&quot;#库尔贝&quot; class=&quot;headerlink&quot; title=&quot;库尔贝&quot;&gt;&lt;/a&gt;库尔贝&lt;/h3&gt;&lt;p&gt;写实主义旗手：库尔贝 Gustave Courbet 1819 ~ 1877 French&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>古典主义画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/10/classicism-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/10/classicism-western-aesthetic-ios/</id>
    <published>2024-08-10T15:07:30.000Z</published>
    <updated>2024-08-21T11:05:35.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阿尔玛-塔德玛"><a href="#阿尔玛-塔德玛" class="headerlink" title="阿尔玛-塔德玛"></a>阿尔玛-塔德玛</h3><p>大理石画家：阿尔玛-塔德玛 Alma Tadema 1836 ~ 1912 England</p><a id="more"></a><p>出生于荷兰的德龙赖普，在比利时安特卫普的学院接受传统的学院训练。于1869年定居英国，1873年入籍英国公民，并在维多利亚女王的81岁生日庆典上被封为爵士。1876年成为皇家艺术学院的准会员，1879年加入皇家学院，擢升为学士，并于1899年被授予骑士爵位。</p><p>阿尔玛-塔德玛留下了大量的画作，和一间由大理石覆盖的大型画室给他的两个女儿。由于现代艺术的崛起，他的作品在20世纪的大部分年代里被鄙视为堕落、颓废的艺术，而完全遭到忽略，直到20世纪末，他的作品才又受到重视。</p><p><img src="https://image-static.segmentfault.com/285/572/2855726849-66c5c3eac2d0d" alt="图片" style="zoom:50%;"></p><hr><h3 id="温特哈尔特"><a href="#温特哈尔特" class="headerlink" title="温特哈尔特"></a>温特哈尔特</h3><p>古典主义：温特哈尔特 Franz Xaver Winterhalter 1805 ~ 1873 German</p><p>1823年，十八岁的温特哈尔特到慕尼黑寻求发展，在1828年他成为了卡尔斯鲁厄的公爵夫人 Sophie Margravine of Baden 的绘画大师。他在德国之外获得成功的机会始于1832年，1833年-1834年他到意大利旅行，受到了利奥波德大公爵的支持，他从卡尔斯鲁厄回来时，他的利奥波德大公爵及其夫人的画像使他很快成为大公国的专职画师。</p><p>1987年，在伦敦国家肖像画画廊及巴黎的小皇宫博物馆，温特哈尔特的绘画作品被做为一个主要的陈列展。这使得他的优秀画作重新成为众人注意的焦点，温特哈尔特又回到被人们认可的杰出的绘画大师的地位上来。今天，他的绘画作品在欧洲和美国的主要博物馆展出。</p><p><img src="https://image-static.segmentfault.com/421/529/4215291204-66c5c3e018dbe" alt="图片" style="zoom:50%;"></p><hr><h3 id="莱顿"><a href="#莱顿" class="headerlink" title="莱顿"></a>莱顿</h3><p>新英国古典主义：莱顿 Frederick Leighton 1830 ~ 1896 England</p><p>他辉煌的艺术光芒甚至冲淡了雷诺兹的影响，成了英国皇家学院派的代名词。不像19世纪大部分画家那样，莱顿并没有在皇家艺术学院学习，他在布鲁塞尔、巴黎、法兰克福接受绘画训练，1852年他搬到罗马居住，古典艺术给了他很大影响。</p><p>1855年他回到英国，他的作品Cimabue’s celebrated Madonna展出并被维多利亚女王购买，这是他事业的转折。1878年莱顿当选为英国皇家艺术学院院长，1896年受封为男爵，他是英国唯一获此殊荣的画家。</p><p><img src="https://image-static.segmentfault.com/250/312/2503129769-66c46428049bd" alt="image-20240821183004446" style="zoom:50%;"></p><hr><h3 id="摩尔"><a href="#摩尔" class="headerlink" title="摩尔"></a>摩尔</h3><p>古典主义：摩尔 Albert Joseph Moore 1841 ~ 1893 England</p><p>摩尔出生在英国约克郡一个著名的艺术家庭，在父亲和哥哥的引导下，他很早就走上了艺术创作的道路。十九世纪五十年代，摩尔来到伦敦，先在肯辛顿艺术学校学习，而后考入英国皇家学院，1860年前往巴黎和罗马深造。</p><p>渐渐地，摩尔在艺术上形成了着色轻柔、线条细腻的独特风格，在维多利亚时代的画家中显得十分突出。他的大部分作品都是以古希腊和古罗马的休闲人物为主角，人物形象明显受到希腊风格的影响。</p><p><img src="https://image-static.segmentfault.com/192/878/1928785125-66c5c3c8c21d0" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;阿尔玛-塔德玛&quot;&gt;&lt;a href=&quot;#阿尔玛-塔德玛&quot; class=&quot;headerlink&quot; title=&quot;阿尔玛-塔德玛&quot;&gt;&lt;/a&gt;阿尔玛-塔德玛&lt;/h3&gt;&lt;p&gt;大理石画家：阿尔玛-塔德玛 Alma Tadema 1836 ~ 1912 England&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>拉斐尔前派画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/09/the-pre-raphaelite-brotherhood-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/09/the-pre-raphaelite-brotherhood-western-aesthetic-ios/</id>
    <published>2024-08-09T15:07:30.000Z</published>
    <updated>2024-08-20T09:42:07.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="沃特豪斯"><a href="#沃特豪斯" class="headerlink" title="沃特豪斯"></a>沃特豪斯</h3><p>拉斐尔前派：沃特豪斯 John William Waterhouse 1849 ~ 1917 England</p><a id="more"></a><p>沃特豪斯被认为成拉斐尔前派画家，但事实上并非如此。沃特豪斯早期受亚玛泰得玛和雷顿影响，因此偏向于新古典主义，后来受伯恩琼斯、罗塞蒂等人影响，便倾向于拉斐尔前派主义。沃特豪斯的作品多以神话、历史故事、文学作品为题材，画风清新自然，带有神秘色彩，但比拉斐尔前派的画家的作品更有世俗性。</p><p><img src="https://image-static.segmentfault.com/266/806/2668062756-66c463e5ce845" alt="图片" style="zoom:50%;"></p><hr><h3 id="伯恩琼斯"><a href="#伯恩琼斯" class="headerlink" title="伯恩琼斯"></a>伯恩琼斯</h3><p>拉斐尔前派：伯恩琼斯 Sir Edward Coley Burne Jones 1833 ~ 1898 England</p><p>出生于英国伯明翰，于牛津大学受教育，由拉斐尔前派的罗塞蒂所训练，并分享整个艺术格调。他是拉斐尔前派理想的热情支持者与实践者。</p><p>拉斐尔前派艺术中中世纪的神秘元素深深吸引了原本就喜爱神话传说的伯恩琼斯，他以亚瑟王传说、圣经故事、希腊神话为主题创造了一大批充满浪漫主义情调的杰作。</p><p>清晰的肌肉描绘、无力的姿态和中性的人物造型是伯恩琼斯画风的特点，他用这些要素创造出了一个非人间的、超世俗的艺术氛围。</p><p><img src="https://image-static.segmentfault.com/405/565/4055652894-66c463ef9b6aa" alt="图片" style="zoom:50%;"></p><hr><h3 id="罗塞蒂"><a href="#罗塞蒂" class="headerlink" title="罗塞蒂"></a>罗塞蒂</h3><p>天上人间：罗塞蒂 Dante Gabriel Rossetti 1828 ~ 1882 England</p><p>拉斐尔前派的精神主要是追寻一种自然但又浪漫的艺术表现。这种风格反对冷淡、生硬的艺术。痛斥人与自然的疏离，希望通过艺术将人性、自然和理想美结合起来。拉斐尔前派对欧洲美术与文学产生重大影响。</p><p>罗塞蒂所画的全部女性，似乎都有一个共同点，即使模特儿变了，也都具有一张理智的、同时也是梦幻的、热情的官能的脸。这种面相一时成为英国人的理想典型，而罗塞蒂风的女性被当时认为”现代式的美人“。</p><p><img src="https://image-static.segmentfault.com/292/177/2921779244-66c463f9cd7b7" alt="图片" style="zoom:50%;"></p><hr><h3 id="迪科塞尔"><a href="#迪科塞尔" class="headerlink" title="迪科塞尔"></a>迪科塞尔</h3><p>拉斐尔前派：迪科塞尔 Sir Frank Bemard Dicksee 1853 ~ 1929 England</p><p>迪科塞尔成长在一个艺术家庭里，他的父亲（Thomas Francis Dicksee）、兄弟和姊妹玛格丽特（Margaret）都是众所周知的画家，家住在伦敦的布卢姆茨伯里区。</p><p>他最初的艺术教育来自他的父亲，在1870年进入皇家专科学校之前，对他进行培养授课的都是当时出名的资深学者，如莱顿和米莱斯。</p><p>1881年迪科塞尔被选举为英国皇家艺术会会员，并且在随后的十年之内一直保持该荣誉。他的大部分画作是戏剧性的历史和传奇的故事，同时他也以在绘画中完美表现优雅时髦的女人肖像而著称。</p><p><img src="https://image-static.segmentfault.com/358/775/3587757154-66c464016b271" alt="图片" style="zoom:50%;"></p><hr><h3 id="布朗"><a href="#布朗" class="headerlink" title="布朗"></a>布朗</h3><p>拉斐尔前派：布朗 Ford Madox Brown 1821 ~ 1893 French</p><p>英国画家和设计师，出生于法国卡拉斯，一个英国船只事务长的儿子。他先后在比利时、巴黎和罗马学习艺术。</p><p>1846年定居英格兰，在那里，他加入了拉斐尔前派，但从未成为该运动的一员。他为莫里斯以及他于1861年说明建立的一个制造装饰公司设计彩色玻璃和家具，他以准确的细节描绘和明亮的色彩运用技巧而出名。</p><p><img src="https://image-static.segmentfault.com/168/360/168360335-66c4640b53c06" alt="图片" style="zoom:50%;"></p><hr><h3 id="亨特"><a href="#亨特" class="headerlink" title="亨特"></a>亨特</h3><p>拉斐尔前派：亨特 William Holman Hunt 1827 ~ 1910 England</p><p>亨特生于伦敦，就读于皇家学院，为英国画家，1848年和罗塞蒂及米莱斯共同创立拉斐尔前派。他的宗教绘画和象征性绘画以详尽的细节和明亮的色彩为特点，他的著作有《前拉斐尔主义和前拉斐尔派》。他缺乏艺术的天分，却梦想成为艺术家，1844年经三次努力后，终于进入皇家学院，他的成功完全由于他拼命式的坚持，米莱斯为人亲切近人，亨特则有些傲慢自负。</p><p><img src="https://image-static.segmentfault.com/360/446/3604467253-66c46414d107b" alt="图片" style="zoom:50%;"></p><hr><h3 id="米莱斯"><a href="#米莱斯" class="headerlink" title="米莱斯"></a>米莱斯</h3><p>拉斐尔派神童：米莱斯 John Everett Millais 1829 ~ 1896 England</p><p>米莱斯在伦敦的皇家艺术学院受教育，作品题材涉猎广泛，尤以描绘浪漫历史场景和孩童为主题的作品居多，还为维多利亚王朝许多显贵画过肖像。题材来自莎士比亚戏剧《哈姆雷特》的《奥菲利亚》是最受欢迎的代表作之一，米莱斯用细腻精致的笔调刻画了感人的场面，充满凄凉哀婉的情调。</p><p>米莱斯的绘画注重写生，并常常在创作题材上主义道德观念的宣传。除了宣传一种宗教道德观念以外，还充满着感伤的情绪，这在他的一系列作品中表现得十分明显。他的技法十分精致、华丽，在当时很受欢迎，后来他成为了皇家美术学院的院士和院长。</p><p><img src="https://image-static.segmentfault.com/886/498/886498906-66c4641f615f2" alt="图片" style="zoom:50%;"></p><hr><h3 id="莱顿"><a href="#莱顿" class="headerlink" title="莱顿"></a>莱顿</h3><p>拉斐尔前派：莱顿 Edmund Blair Leighton 1852 ~ 1922 England</p><p>英国画家，擅长中世纪和摄政时代题材，他父亲也是一位画家。</p><p>1843 - 1855年，莱顿父亲的作品在英国皇家艺术学院展出。1874年，22岁的莱顿第一次展出他的作品。1878 - 1890年，26岁的莱顿的作品每一年都在英国皇家艺术学院展出。</p><p>身为维多利亚时代的重要艺术家，莱顿的作品在皇家艺术学院展出了四十年之久，而他却从来没有成为皇家艺术学院的院士。</p><p>他的很多作品成为蜚声世界的名画，为人们留下了一个鲜活的中世纪，尤其是他精美绝伦的骑士题材作品，成为了举世公认的著名精品。</p><p><img src="https://image-static.segmentfault.com/250/312/2503129769-66c46428049bd" alt="image-20240820170600248" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;沃特豪斯&quot;&gt;&lt;a href=&quot;#沃特豪斯&quot; class=&quot;headerlink&quot; title=&quot;沃特豪斯&quot;&gt;&lt;/a&gt;沃特豪斯&lt;/h3&gt;&lt;p&gt;拉斐尔前派：沃特豪斯 John William Waterhouse 1849 ~ 1917 England&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>浪漫主义画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/08/romanticism-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/08/romanticism-western-aesthetic-ios/</id>
    <published>2024-08-08T15:07:30.000Z</published>
    <updated>2024-08-20T09:35:20.777Z</updated>
    
    <content type="html"><![CDATA[<h3 id="弗里德里希"><a href="#弗里德里希" class="headerlink" title="弗里德里希"></a>弗里德里希</h3><p>精神性风暴：弗里德里希 Caspar David Friedrich 1774 ~ 1840 Sweden</p><a id="more"></a><p>19世纪德国浪漫主义风景画家，出生于瑞典波美拉尼亚的格赖夫斯瓦尔德镇，这里也是他学习艺术的起点。</p><p>弗里德里希笔下的风景不是一般意义上的风景画类型，画中常流露出一种神秘、虔诚的意象，确切的说是一种宗教意象的体现，充满静谧、空无的气氛。他冷寂虚幻的风景画与歌德的小说、贝多芬的音乐，成为德国浪漫主义的佼佼者。</p><p><img src="https://image-static.segmentfault.com/124/095/1240950745-66c457725eea3" alt="图片" style="zoom:50%;"></p><hr><h3 id="康斯特布尔"><a href="#康斯特布尔" class="headerlink" title="康斯特布尔"></a>康斯特布尔</h3><p>自然的礼赞：康斯特布尔 John Constable 1776 ~ 1837 England</p><p>出生于英国萨福克，1799年进入皇家学院，发展出个人风格，他大部分时间在户外写生上画，最后在工作室内完成作品，出名于风景描绘，1824年赢得巴黎展览金牌。</p><p>康斯特布尔现在已经成为英国风景画的代表，他的作品把英国的风景画真正从因袭成规和外国影响中摆脱出来，他热爱家乡和大自然，甚至从没有去过苏格兰和威尔士。1829年成为皇家学院的成员，1837年3月卒于伦敦。</p><p><img src="https://image-static.segmentfault.com/263/080/2630801962-66c4577d7eff8" alt="图片" style="zoom:50%;"></p><hr><h3 id="德拉克洛瓦"><a href="#德拉克洛瓦" class="headerlink" title="德拉克洛瓦"></a>德拉克洛瓦</h3><p>浪漫舵手：德拉克洛瓦 Eugene Delacroix 1798 ~ 1863 French</p><p>法国著名画家，曾师从法国著名的古典主义画派画家雅克·路易·大卫学习绘画，但却非常欣赏荷兰画家彼得·保罗·鲁本斯的强烈色彩的绘画，并受到同时代画家热里科的影响，热心发展色彩的作用，成为浪漫主义画派的典型代表。</p><p>在大卫画室他认识了浪漫主义的先驱热里科，并深受其影响。他与历史画家安东尼·让·格罗和保皇派画家弗朗索瓦·热拉尔交往；他博览群书，特别喜欢但丁、莎士比亚、拜伦和司各特的作品。他为歌德的《浮士德》作的插图深受老年歌德的赞颂；他盛赞米开朗基罗、提香、伦勃朗、委拉斯开兹，特别崇拜鲁本斯和康斯特布尔；他与诗人波德莱尔有着亲密的友谊，对莫扎特的天才赞叹不已。</p><p><img src="https://image-static.segmentfault.com/428/697/4286972407-66c4578d1550d" alt="图片" style="zoom:50%;"></p><hr><h3 id="布莱克"><a href="#布莱克" class="headerlink" title="布莱克"></a>布莱克</h3><p>宇宙再创者：布莱克 William Blake 1757 ~ 1827 England</p><p>于1757年出生于伦敦，是一个诗人、图解者、雕刻师、西洋棋师、作家和画家。布莱克主张他的经验，用他的良心来对抗学院派的、唯物论的十八世纪的年代，他的特质与反正统的天性，乃不被当年代所接受，于是他用自己的双手来雕刻生产本身的产品，从其中，找出了自我。</p><p>布莱克创造一个复杂的个人的神话和发明他自己的象征的字母来反射他的社会，一位自由的思想家。晚年困于贫境，只剩了解赞美他的一群年轻艺术家，1827年8月卒于伦敦。</p><p><img src="https://image-static.segmentfault.com/424/448/4244482705-66c4579613f12" alt="图片" style="zoom:50%;"></p><hr><h3 id="席里柯"><a href="#席里柯" class="headerlink" title="席里柯"></a>席里柯</h3><p>古典与虚无之间：席里柯 Theodore Gericault 1791 ~ 1824 French</p><p>于1819年在国家沙龙（法国的美术博览会）上展出的《梅杜萨之筏》，被看成是浪漫主义绘画的重要代表作，标志着浪漫主义画派的真正形成。这幅画引起了美术界和舆论界的热烈论战，它所反映的是法国巡洋战舰梅杜萨号在非洲海岸触礁沉没的事件。</p><p>席里柯只活了33岁，他短暂的一生给人类留下的艺术遗产有191幅油画、180余幅素描、100余幅石版画和6件雕塑，其中《赛马》、《轻骑兵军官》、《奴隶市场》和石版画《伟大的英国》等都广为人们所称道。</p><p><img src="https://image-static.segmentfault.com/343/918/3439189443-66c4579ee0d1c" alt="图片" style="zoom:50%;"></p><hr><h3 id="透纳"><a href="#透纳" class="headerlink" title="透纳"></a>透纳</h3><p>再现大自然的力量：透纳 Joseph Mallord William Turner 1775 ~ 1851 England</p><p>透纳是英国浪漫主义风景画家，著名的水彩画家和版画家，他的作品对后期的印象派绘画发展有相当大的影响。在18世纪历史画为主流的画坛上，他的作品并不受重视，但现代公认他是非常伟大的风景画家。</p><p>透纳以善于描绘光与空气的微妙关系而闻名于世，他在艺术史上的特殊贡献是把风景画与历史画、肖像画摆到了同等的地位。生前即享有盛名，1851年去世后依然在世界各地受到敬仰和追摹直至十九世纪晚期。</p><p><img src="https://image-static.segmentfault.com/509/136/50913611-66c457a66c3fb" alt="图片" style="zoom:50%;"></p><hr><h3 id="戈雅"><a href="#戈雅" class="headerlink" title="戈雅"></a>戈雅</h3><p>西班牙之光：戈雅 Francisco de Goya 1746 ~ 1828 Spanish</p><p>至上的西班牙艺术家，对19及20世纪的绘画有深刻的影响，常被称为”最现代的”，他坚持描绘他的时代，开启了19世纪的写实主义。</p><p>生平创作很多，在肖像画、风俗画、历史画、宗教画及讽刺画等方面，都有卓越的成就。他不仅作油画和壁画，还作了许多意义深刻的铜版画。做作皇族群像，辛辣地揭示了他们专横无能的本质。油画《1808年5月3日》歌颂了西班牙爱国者反抗侵略之英勇斗争，他的创作，对近世欧洲绘画有深刻的影响。</p><p><img src="https://image-static.segmentfault.com/497/477/497477058-66c457ae24f68" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;弗里德里希&quot;&gt;&lt;a href=&quot;#弗里德里希&quot; class=&quot;headerlink&quot; title=&quot;弗里德里希&quot;&gt;&lt;/a&gt;弗里德里希&lt;/h3&gt;&lt;p&gt;精神性风暴：弗里德里希 Caspar David Friedrich 1774 ~ 1840 Sweden&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>学院艺术画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/07/academic-art-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/07/academic-art-western-aesthetic-ios/</id>
    <published>2024-08-07T15:07:30.000Z</published>
    <updated>2024-08-20T09:34:38.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="布格罗"><a href="#布格罗" class="headerlink" title="布格罗"></a>布格罗</h3><p>完美画家：布格罗 William Adolphe Bouguereau 1825 ~ 1905 French</p><a id="more"></a><p>布格罗是19世纪上半叶至19世纪末法国艺术绘画的最重要人物，布格罗追求唯美主义，擅长创造美好、理想化的境界，他创作有以神话、天使和寓言为题材的画作，也有近似于照片特质的写实绘画题材的画作，这些完美的风格吸引了大批艺术追随者和发起人，他一生获得多种殊荣，成为当时法国最著名的画家。</p><p>布格罗的绘画生涯十分成功，有超过700幅以上的作品，他还用奋斗得来的财产以辅助年轻的美术工作者。如同十九世纪众多的画家一般，布格罗慎重小心地、勤勉地致力于工作中，他用亲切的态度来写真，用爱心及热情来完成他所有美妙的画作。</p><p><img src="https://image-static.segmentfault.com/378/854/37885457-66c454b4ef959" alt="图片" style="zoom:50%;"></p><hr><h3 id="皮埃尔·奥古斯特·库特"><a href="#皮埃尔·奥古斯特·库特" class="headerlink" title="皮埃尔·奥古斯特·库特"></a>皮埃尔·奥古斯特·库特</h3><p>学院艺术：皮埃尔·奥古斯特·库特 Pierre Auguste Cot 1837 ~ 1883 French</p><p>1837年2月生于贝达里约，卒于1883年7月，法国新古典主义画家，为弗朗西斯·约瑟夫·杜雷特和莱昂·柯涅的学生，以神迹为主题，因肖像画而得名。</p><p><img src="https://image-static.segmentfault.com/396/905/396905168-66c454c106f6a" alt="图片" style="zoom:50%;"></p><hr><h3 id="莱菲博瑞"><a href="#莱菲博瑞" class="headerlink" title="莱菲博瑞"></a>莱菲博瑞</h3><p>学院艺术：莱菲博瑞 Jules Joseph Lefebvre 1836 - 1911 Flemish</p><p>法国画家、教育家和理论家。朱尔斯·约瑟夫·莱菲博瑞出生于塞纳-马恩省，1851年考入国立高等美术学院，是莱昂·柯涅的学生。</p><p>他于1861年赢得了罗马奖。1855-1898期间，朱尔斯·约瑟夫·莱菲博瑞多次参加沙龙展览，并于1891年成为了法兰西艺术学院的院士。</p><p><img src="https://image-static.segmentfault.com/357/038/3570386695-66c454cbd6c05" alt="图片" style="zoom:50%;"></p><hr><h3 id="杰罗姆"><a href="#杰罗姆" class="headerlink" title="杰罗姆"></a>杰罗姆</h3><p>学院艺术：杰罗姆 Jean - Leon Gerome 1824 - 1904 French</p><p>法国学院派古典主义画家、制图家和雕塑家。杰罗姆在17岁时前往巴黎，拜法国学院派画家和雕塑家保罗·德拉罗什为师。</p><p>1847年，在巴黎的沙龙展览上以《斗鸡》（Young Greeks Attending a Cock Fight）一画获奖。其作品主要以历史、神话、东方风情为题材。</p><p><img src="https://image-static.segmentfault.com/371/020/3710206064-66c454d40416f" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;布格罗&quot;&gt;&lt;a href=&quot;#布格罗&quot; class=&quot;headerlink&quot; title=&quot;布格罗&quot;&gt;&lt;/a&gt;布格罗&lt;/h3&gt;&lt;p&gt;完美画家：布格罗 William Adolphe Bouguereau 1825 ~ 1905 French&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>新古典主义画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/06/neoclassicism-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/06/neoclassicism-western-aesthetic-ios/</id>
    <published>2024-08-06T15:07:30.000Z</published>
    <updated>2024-08-20T09:34:03.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安格尔"><a href="#安格尔" class="headerlink" title="安格尔"></a>安格尔</h3><p>古典主义巨擘：安格尔  Jean Auguste Dominique Ingres 1780 ~ 1867 French</p><a id="more"></a><p>1780年出生在蒙托邦，法国新古典主义的领导者。1797年进入大卫画室跟随安东尼·让·格罗学习，1801年获得罗马奖。</p><p>安格尔是一个对自然崇拜得五体投地的多情者，安格尔在向希腊人和拉斐尔讨教之前，先学习了自然。他曾断言：“希腊就是自然；拉斐尔之所以是拉斐尔，就是因为他比别人更了解自然。”</p><p>不过，安格尔并不能完全放弃明暗的处理，他还使用很强的、鲜艳得过分而不真实的颜色，以弥补作品色彩的冷淡。</p><p><img src="https://image-static.segmentfault.com/328/325/328325991-66c452eb5f5ac" alt="图片" style="zoom:50%;"></p><hr><h3 id="大卫"><a href="#大卫" class="headerlink" title="大卫"></a>大卫</h3><p>艺术斗士革命家：大卫 Jacques Louis David 1748 ~ 1825 French</p><p>法国画家，1748年8月30日生于巴黎，1825年12月29日卒于比利时布鲁塞尔。年轻时受教于皇家学院的洛可可画家，并得到奖章，到意大利后，受到古典艺术的影响而演化成为新古典主义的风格。</p><p>他对于政治的热衷，使得有权限来扮演推动未来卢浮宫博物馆的创立，但也因于革命时期令太多人进了断头台，而于革命后被监禁，随后被放逐至布鲁塞尔，直到1825年的死亡。</p><p><img src="https://image-static.segmentfault.com/378/445/3784458487-66c452e065337" alt="图片" style="zoom:50%;"></p><hr><h3 id="蒂索"><a href="#蒂索" class="headerlink" title="蒂索"></a>蒂索</h3><p>新古典主义：蒂索 James Jacques-Joseph Tissot 1836 - 1902 French</p><p>蒂索是法国新古典主义重要画家，出生在法国南特（法国西部港口城市）一个中产阶级家庭。他早年的作品题材以历史人物为主，但到了1864年，他改变了作品题材，开始描绘当时的人物，尤其是时尚女性，获得了巨大成功。</p><p>而这一切的平静，都被1870年的法国与普鲁士战争所打破。1871年，巴黎爆发起义，蒂索也参与其中。政府镇压起义后，他被迫流亡英国。</p><p><img src="https://image-static.segmentfault.com/415/865/4158657712-66c452d32c004" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安格尔&quot;&gt;&lt;a href=&quot;#安格尔&quot; class=&quot;headerlink&quot; title=&quot;安格尔&quot;&gt;&lt;/a&gt;安格尔&lt;/h3&gt;&lt;p&gt;古典主义巨擘：安格尔  Jean Auguste Dominique Ingres 1780 ~ 1867 French&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>洛可可艺术画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/05/rococo-art-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/05/rococo-art-western-aesthetic-ios/</id>
    <published>2024-08-05T15:07:30.000Z</published>
    <updated>2024-08-20T09:33:38.477Z</updated>
    
    <content type="html"><![CDATA[<h3 id="弗拉戈纳尔"><a href="#弗拉戈纳尔" class="headerlink" title="弗拉戈纳尔"></a>弗拉戈纳尔</h3><p>梦幻洛可可：弗拉戈纳尔 Honore Fragonard 1732 ~ 1806 French</p><a id="more"></a><p>风俗画、风景画、肖像画及历史画家。 1752 年得到罗马奖，曾任皇室画家、学院院士，十八世纪法国洛可可画家。</p><p>他是一位多变的画家，绝少在作品留名，故无法得知其风格发展，法国大革命毁掉了他的事业，使得他不得不调整他的风格以求生存，于1806 年终因贫穷死于巴黎。</p><p><img src="https://image-static.segmentfault.com/730/723/730723091-66bc5947d717c" alt="img" style="zoom:50%;"></p><hr><h3 id="庚斯博罗"><a href="#庚斯博罗" class="headerlink" title="庚斯博罗"></a>庚斯博罗</h3><p>热爱风景的肖像画家：庚斯博罗 Thomas Gainsborough 1727 ~ 1788 England</p><p>18 世纪洛可可主义英国的肖像及风景画家，生于英国萨福克郡的一个羊毛商家庭，他的母亲是一个静物画家， 因此他早期接受了良好的艺术教育，后又在法国画家格霍夫洛特那里做助手并与海曼共事过一段时间。</p><p>1768 年他被选为皇家艺术学院院士，并获邀为皇室成员作画。 他的作品强调光和奔放的笔触，加之精致的色彩，使得他成为皇家宠爱的画家。</p><p><img src="https://image-static.segmentfault.com/279/331/2793318995-66bc5d6f639f8" alt="图片" style="zoom:50%;"></p><hr><h3 id="卡纳莱托"><a href="#卡纳莱托" class="headerlink" title="卡纳莱托"></a>卡纳莱托</h3><p>威尼斯韶光：卡纳莱托 Giovanni Antonio Canaletto 1697 ~ 1768 Italian</p><p>卡纳莱托出生于威尼斯，他在父亲的工作室开始绘画生涯。 1720年前后，他转向于创作风景画，并且一生专注于此，将风俗画提升为新艺术层次。 前辈们都公认，卡纳莱托的优越，在他那一个时期无人可比。</p><p>他也时常使用广角或鸟瞰图和很多消失点; 将透视画法掌握得当，借着复杂空间的探险，引导我们的视觉航行在画面上。他小心翼翼地强调画面上的外观时，我们可以感觉出古典的风味和令人感动的不同；这种组合，是空气和环境对感觉上延伸的一种影响，本质上是洛可可风格，可以和提埃波罗（Tiepolo）相比较。</p><p><img src="https://image-static.segmentfault.com/371/579/3715798841-66bc5e06adcd7" alt="图片" style="zoom:50%;"></p><hr><h3 id="提埃波罗"><a href="#提埃波罗" class="headerlink" title="提埃波罗"></a>提埃波罗</h3><p>威尼斯之光：提埃波罗 Giovanni Battista Tiepolo 1696 ~ 1770 Italian</p><p>提埃波罗是最后一位重要的威尼斯派装饰画家，也是意大利洛可可最纯粹的诠释者。1725年，提埃波罗着手乌丹的总主教宫殿工作，这是他第一项重大的湿壁画装饰工作。这些壁饰显示出他纯熟的技法，作湿壁画所必须的明亮色调与轻淡色彩，显然有助于摆脱他早先所研习的色调阴暗的毕亚契达风格。乌丹的湿壁画同时也显示，他发展出以一种超越平面构图的夸张透视法，来构筑他的世界，画中的建筑物后退到模糊的远处。</p><p><img src="https://image-static.segmentfault.com/320/316/3203165221-66bc5e9e22d48" alt="图片" style="zoom:50%;"></p><hr><h3 id="格勒兹"><a href="#格勒兹" class="headerlink" title="格勒兹"></a>格勒兹</h3><p>洛可可艺术：格勒兹 Jean Baptiste Greuze 1725 ~ 1805 French</p><p>法国画家，出生在社会底层的泥瓦工人家庭，自幼爱画画，但不被父亲重视，后来在外祖父的支持下进了里昂美术学校学习，不久又转到巴黎升入美术学院学画。</p><p>他擅长作风俗画和肖像画，这些作品尽管有些像在演戏，而 D.狄德罗却对作品的民主倾向、社会教育作用、面向当代生活以及在形象和心理刻画技巧等方面给予高度评价。</p><p><img src="https://image-static.segmentfault.com/342/836/3428366469-66bc5f227fcf7" alt="图片" style="zoom:50%;"></p><hr><h3 id="霍加斯"><a href="#霍加斯" class="headerlink" title="霍加斯"></a>霍加斯</h3><p>英国艺术捍卫战士：霍加斯 William Hogarth 1697 ~ 1764 England</p><p>霍加斯是英国画家，艺术理论家。 1697年11月10日生于伦敦，家境贫苦，父亲曾因负债入狱，这种生活体验对他的创作风貌不无影响。这位被称为“英国绘画之父”的画家，可以说是英国第一位在欧洲赢得声誉的、富于民族特色的美术家。</p><p>霍加斯的艺术曾先后受到以鲁本斯为代表的巴洛克艺术影响，尼德兰的博斯和勃鲁盖尔给他的讽刺画创作有极大的启迪，也不能忽视法国的洛可可艺术和伦勃朗艺术在他创作中起的作用。</p><p><img src="https://image-static.segmentfault.com/706/473/706473605-66bc5fb41963b" alt="图片" style="zoom:50%;"></p><hr><h3 id="雷诺兹"><a href="#雷诺兹" class="headerlink" title="雷诺兹"></a>雷诺兹</h3><p>学者画家：雷诺兹 Sir Joshua Reynolds 1723 ~ 1792 England</p><p>英国18世纪后期最富盛名且颇具影响力的历史肖像画家和艺术评论家，英国皇家美术学院的创办人。雷诺兹强调绘画创作的理性一面，他的许多观点是英国18世纪美学原理最典型的体现。</p><p>1768 年被推选为皇家艺术学院的首任院长，且被授予骑士爵位，他对学院学生的演讲奠立了学院艺术的理想、道德的准则，创作极大量的肖像画，画风深受米开朗基罗和鲁本斯的影响。</p><p><img src="https://image-static.segmentfault.com/163/027/1630270440-66bc605041fdb" alt="图片" style="zoom:50%;"></p><hr><h3 id="布歇"><a href="#布歇" class="headerlink" title="布歇"></a>布歇</h3><p>华丽浪漫的悖德：布歇 Francois Boucher 1703 ~ 1770 French</p><p>布歇生于巴黎，父亲是图案画家。 从少年时代受父亲的教育，是个极其早熟的人，1723 年获得学院的罗马奖，1734 年以才能成为皇家学院院士，并受到皇室的特别保护。</p><p>布歇是一位最典型的洛可可装饰画家，创作数百幅画作，并深谙各种装饰画和插画的制作，无不精通。他以细致的、无忧无虑的感觉来描绘他的画作，亦可说是最时髦的画家。其多情的风格，容易的样式，被广泛地模仿，也造就了新古典主义的提升。</p><p><img src="https://image-static.segmentfault.com/709/132/70913225-66bc60eb8e7fc" alt="图片" style="zoom:50%;"></p><hr><h3 id="夏尔丹"><a href="#夏尔丹" class="headerlink" title="夏尔丹"></a>夏尔丹</h3><p>伟大的静物画家：夏尔丹 Jean Baptiste Simeon Chardin 1699 ~ 1779 French</p><p>夏尔丹是18世纪法国伟大画家之一，于1699年11月在巴黎出生，他的静物作品述说着法国的中产阶级。</p><p>夏尔丹尖锐的作品风格对照着历史事件，构成了洛可可的主流，他的画作被皇家学院所遵从，1756年，他重新开始静物画的创作。</p><p>他的静物画和粉笔肖像画受到广泛的赞赏，现在有很高的价值，他的作品描绘了普通的生活场景，但构图严谨，颜色使用的不多，一般都是土壤似温暖的色调，特别善于描绘散射的光线、物体的质感和轮廓，现在他的作品被卢浮宫等许多大博物馆收藏。</p><p><img src="https://image-static.segmentfault.com/337/185/3371855552-66bc618d3e0f1" alt="图片" style="zoom:50%;"></p><hr><h3 id="华托"><a href="#华托" class="headerlink" title="华托"></a>华托</h3><p>洛可可的梦幻雅宴：华托 Jean Antoine Watteau 1684 ~ 1721 Flemish</p><p>华托生于靠近比利时国境的瓦伦西恩村，父亲是泥瓦匠人，因为生活不充裕，很早就让华托作小工。1704 年左右，戏剧布景画家吉罗特看出华托的才能，把他收为自己的学生。</p><p>华托的技巧不断提高，画戏剧广告比先生还好，因此吉罗特不知不觉开始嫉妒他，把他从自己画室里赶了出去。 华托没办法，就作了当时负责监督莱克桑勃尔宫殿的叫安德兰的画家的学生，他也给予华托的艺术以很大的影响。</p><p>1708 年的工作使他得以接触到鲁本斯的画作，对他之影响处处可见，1709 年得到罗马奖第二名，开始得到名声。但他的身体虚弱，时常生病，年岁不长就辞世。</p><p><img src="https://image-static.segmentfault.com/305/309/3053095091-66bc629191f19" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;弗拉戈纳尔&quot;&gt;&lt;a href=&quot;#弗拉戈纳尔&quot; class=&quot;headerlink&quot; title=&quot;弗拉戈纳尔&quot;&gt;&lt;/a&gt;弗拉戈纳尔&lt;/h3&gt;&lt;p&gt;梦幻洛可可：弗拉戈纳尔 Honore Fragonard 1732 ~ 1806 French&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>巴洛克主义画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/04/baroque-art-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/04/baroque-art-western-aesthetic-ios/</id>
    <published>2024-08-04T15:07:30.000Z</published>
    <updated>2024-08-20T09:32:32.821Z</updated>
    
    <content type="html"><![CDATA[<h3 id="委拉斯开兹"><a href="#委拉斯开兹" class="headerlink" title="委拉斯开兹"></a>委拉斯开兹</h3><p>巴洛克骑士：委拉斯开兹 Diego Velazquez 1599 ~ 1660 Spanish</p><a id="more"></a><p>西班牙至高无上的画家，对欧洲艺术的影响可以说是无人可比的，渊博的能耐大皆由向自然界的学习的来。</p><p>他的作画速度不快，下笔谨慎，技巧考究，色调肃穆晦暗。许多肖像画以简单色彩作背景，使人物的轮廓浮现出来。</p><p>委拉斯开兹被称为“西班牙艺术家的最高贵与最高指导者”，现实主义大师，“画中男女似乎在轻言细语”、“他的马是蓄势待发的，他的狗是活生生的”，明显受其影响的有Goya，Corot，Courbet，Manet和Whistler。</p><p><img src="https://image-static.segmentfault.com/329/090/3290901209-66b5bf837b274" alt="图片" style="zoom:50%;"></p><hr><h3 id="伦勃朗"><a href="#伦勃朗" class="headerlink" title="伦勃朗"></a>伦勃朗</h3><p>黑暗王子：伦勃朗 Rembrandt HarMenszoon van Rijn 1606 ~1669 Dutch</p><p>伦勃朗的父亲是磨坊主，母亲是面包师的女儿，他们共有九个孩子。14岁进莱顿大学；17岁去阿姆斯特丹向历史学家拉斯特曼学画；1627年21岁时已经基本掌握油画、素描和蚀刻画的技巧并发展了自己的风格，30年代就成为阿姆斯特丹的主要肖像画家。</p><p>他的肖像画风格人物安排具有戏剧性，深深打动人心，他以神话和宗教故事为题材的作品供不应求。他对戏剧很感兴趣，经常利用如同舞台高光的亮色描绘在阴暗背景下的人物。</p><p><img src="https://image-static.segmentfault.com/140/571/1405716476-66b5c02bb19c4" alt="图片" style="zoom:50%;"></p><hr><h3 id="卡拉瓦乔"><a href="#卡拉瓦乔" class="headerlink" title="卡拉瓦乔"></a>卡拉瓦乔</h3><p>谪下凡间的酒神：卡拉瓦乔 Michelangelo Merisi da Caravaggio 1571 ~ 1610 Italian</p><p>他的艺术生涯是在意大利文艺复兴盛期的诸大师相继逝世后开始的，曾师从米兰画家培德查诺学画，继承了意大利北部现实主义民俗画的传统，并受到威尼斯画派的影响。</p><p>卡拉瓦乔带来的是一种激进的自然主义，兼具近乎物理上精确的观察和生动甚至充满戏剧性的明暗对照画法。在卡拉瓦乔手中，这种新风格是达到真实性和灵性的工具。虽然卡拉瓦乔在世时声名显赫，死后的几个世纪里却被人们完全遗忘了，只是在20世纪的最近几十年才被重新发现。尽管他影响了所有的艺术风格，但对新兴的巴洛克风格才是真正影响深远的。</p><p><img src="https://image-static.segmentfault.com/100/365/1003650544-66b5c11854d15" alt="图片" style="zoom:50%;"></p><hr><h3 id="威廉·凡·德·维尔德"><a href="#威廉·凡·德·维尔德" class="headerlink" title="威廉·凡·德·维尔德"></a>威廉·凡·德·维尔德</h3><p>巴洛克艺术：威廉·凡·德·维尔德 Willem van de Velde the Younger 1633 ~ 1707 Dutch</p><p>威廉·凡·德·维尔德为荷兰画家，1673年他移居英国，在那里为英王查理二世和其他贵族服务。1707年4月6日在英国伦敦去世，葬在圣雅各教会。</p><p>威廉·凡·德·维尔德的作品最能代表荷兰的辉煌航运，画作都是以细腻、活泼见长。无论是平静或风暴的海洋，在他的渲染下，船舶被画得几乎与照片一样，可见其事前的准备工夫与下笔时的准确性，成为提供17世纪船舶外观的最精确指南。</p><p><img src="https://image-static.segmentfault.com/158/737/1587378564-66b5c1b1ca53e" alt="图片" style="zoom:50%;"></p><hr><h3 id="雷斯达尔"><a href="#雷斯达尔" class="headerlink" title="雷斯达尔"></a>雷斯达尔</h3><p>风景画巨匠：雷斯达尔 Jacob Van Ruisdael 1628 ~ 1692 Dutch</p><p>雷斯达尔擅长风景画，在他的作品中表现了尼德兰风景的特色：苍茫的暮色，湍急的山溪和江河，巨大的风车和林立的磨房，阴云密布的天空等等。在这些风景画中画家充分表现了个人的感受和情绪。他一生创作了数百幅风景画。</p><p>雷斯达尔出生在荷兰哈勒姆市的一个绘画世家，并且被认为是家族中最优秀的一位画家。雷斯达尔的一生不仅仅是一位画家，1676年的时候，雷斯达尔还获得了医学学位，并且在阿姆斯特丹从事医生的工作。</p><p><img src="https://image-static.segmentfault.com/281/230/2812304845-66b5c22d3c4ae" alt="图片" style="zoom:50%;"></p><hr><h3 id="鲁本斯"><a href="#鲁本斯" class="headerlink" title="鲁本斯"></a>鲁本斯</h3><p>巴洛克天才：鲁本斯 Peter Paul Rubens 1577 ~ 1640 Flemish</p><p>法兰德斯画家，是17世纪北欧最多才多艺、最有影响力的巴洛克风格的画家。鲁本斯的影响是势不可挡的，很少有当代的美术家胆敢反抗他的风格。</p><p>鲁本斯一生的创作中，主要是宗教神话题材，他在基督教题材的创作中，不可避免要受到教会的制约，但在神话题材创作中，就可以自由发挥自己的艺术个性。鲁本斯从威尼斯大师们那里获得色彩造型的启迪，在自己的创作中，色彩艺术得到了尽善尽美的发挥，已经超过了他所尊重的威尼斯画派的成就。</p><p><img src="https://image-static.segmentfault.com/232/489/2324895410-66b5c2b46216b" alt="图片" style="zoom:50%;"></p><hr><h3 id="维米尔"><a href="#维米尔" class="headerlink" title="维米尔"></a>维米尔</h3><p>静谧幽光：维米尔 Johannes Vermeer 1632 ~ 1675 Dutch</p><p>荷兰黄金时代绘画大师，被看作“荷兰小画派”的代表画家，但却被人遗忘了长达两个世纪之久，与梵高、伦勃朗合称荷兰三大画家。</p><p>维米尔的作品大多是风俗题材的绘画，基本上取材于市民平常的生活。他的画整个画面温馨、舒适、宁静，给人以庄重的感受，充分表现出了荷兰市民那种对纯净环境和优雅舒适的气氛的喜好。</p><p><img src="https://image-static.segmentfault.com/224/802/2248026139-66b5c41723b83" alt="图片" style="zoom:50%;"></p><hr><h3 id="卡拉奇"><a href="#卡拉奇" class="headerlink" title="卡拉奇"></a>卡拉奇</h3><p>巴洛克艺术：卡拉奇 Annibale Carracci 1560 ~ 1609 Italian</p><p>他最优秀的作品，是为罗马宏大的法尔耐塞宫大厅绘制的大型装饰壁画。我们知道，意大利人是擅长创作壁画的民族，文艺复兴时期众多名家和大师均在这个领域内做出了自己的贡献。</p><p>后来，不同追求的众多画家都从他的创作中获得启示，倾心古典理想的普桑发展了他优美严谨的一面，巴洛克绘画的代表柯尔托纳则把他错觉性的手法当成楷模。卡拉奇创造了上百的天板壁画，成为以后浪漫主义的主要基础，晚年为了克服忧郁而放弃作画，直至1606年，逝世后葬在他期望的拉斐尔旁。</p><p><img src="https://image-static.segmentfault.com/540/360/540360269-66b5c4c44166e" alt="图片" style="zoom:50%;"></p><hr><h3 id="哈尔斯"><a href="#哈尔斯" class="headerlink" title="哈尔斯"></a>哈尔斯</h3><p>永远的笑容骑士：哈尔斯 Frans Hals 1582 ~ 1666 Dutch</p><p>坚强的巴洛克风格，1616年以前无法明显的有突出的表现，除生存时为当时人所知外，逝世后就为人所遗忘，直至19世纪后半阶段印象主义的抬头，世人才重新认识这位天才。</p><p>作为肖像画大师的哈尔斯，最爱用半身近景的构图，突出刻画人物的表情，他的画中人物不是呆板的“模特”，而是正在自由自在、无拘无束、面对观众说笑的人物，他极擅长将人物转瞬即逝的神情，用大胆、自由而不落俗套的技巧永驻于画面；他喜欢用流畅奔放、极为醒目的大笔触和细小笔触相间来塑造形象，色彩响亮透明，富有强烈的对比效果。</p><p><img src="https://image-static.segmentfault.com/397/797/3977973672-66b5c545dec78" alt="图片" style="zoom:50%;"></p><hr><h3 id="霍贝玛"><a href="#霍贝玛" class="headerlink" title="霍贝玛"></a>霍贝玛</h3><p>巴洛克艺术：霍贝玛 Meindert Hobbema 1638 ~ 1709 Dutch</p><p>他只在母国的阿姆斯特丹生活，1638年10月31日受洗于阿姆斯特丹，1709年卒于同地。早年从师雷斯达尔学习风景画，作品多描绘乡村道路、农舍、池畔等，真实地表现了自然界多变的景象，其精确的透视为人称道。</p><p>乡间的宁静别有情趣，令人陶醉。最有名作品为1689年的Avenue at Middleharnis (National Gallery, London)。他的影响几乎皆在英国，很明显的为托马斯·庚斯博罗提供了不少灵感。</p><p><img src="https://image-static.segmentfault.com/278/779/2787791778-66b5c5cac5235" alt="图片" style="zoom:50%;"></p><hr><h3 id="穆里罗"><a href="#穆里罗" class="headerlink" title="穆里罗"></a>穆里罗</h3><p>巴洛克艺术：穆里罗 Bartolome Esteban Murillo 1617 ~ 1682 Spanish</p><p>巴洛克时期西班牙画家，尤以宗教题材画著名，他还画肖像画和许多日常生活场景画。17世纪上半期，西班牙最重要的画派之一是南方的“塞维利亚画派”。“塞维利亚画派”主要描绘寂静的僧侣世界，平凡中含有诗意。</p><p>在1648年结婚后，他的家成为当时艺术家和时尚人士的聚会场所，他在塞维利亚创建了艺术学院。1660年，穆里罗在为一个教堂创作壁画时从棚架上摔落，不久后去世。</p><p><img src="https://image-static.segmentfault.com/290/020/2900203423-66b5c67e46563" alt="图片" style="zoom:50%;"></p><hr><h3 id="勒布伦"><a href="#勒布伦" class="headerlink" title="勒布伦"></a>勒布伦</h3><p>跨流派的超级女画家：勒布伦 Elisabeth-Louise Vigee Lebrun 1755 - 1842 Flemish</p><p>她出生于艺术之家，后来嫁给画家兼书商勒布伦。家庭、师长和丈夫的熏陶、教育与帮助，贯穿勒布伦的一生。</p><p>1779年开始为皇后玛丽·安托瓦内特画肖像，成为皇后的画家和朋友，这给年轻而又漂亮的勒布伦带来极大的荣誉和地位，从此踏入了巴黎的上层社会。皇室和贵族纷纷请她画像，以至法国大革命后她流亡国外。欧洲各国的皇室和贵族们都以能得到她所画的肖像而感到荣幸，一生作有约600幅肖像画及200幅风景画。</p><p><img src="https://image-static.segmentfault.com/583/331/583331431-66b5c722127ee" alt="图片" style="zoom:50%;"></p><hr><h3 id="戴克"><a href="#戴克" class="headerlink" title="戴克"></a>戴克</h3><p>永恒的肖像：戴克 Anthony van Dyck 1599 ~ 1641 Flemish</p><p>比利时弗拉芒族画家，是英国国王查理一世时期的英国宫廷首席画家。查理一世及其皇族的许多著名画像都是由戴克创作的。他的画像轻松高贵的风格，影响了英国肖像画将近150年。他还创作了许多圣经故事和神话题材的作品，并且改革了水彩画和蚀刻版画的技法。</p><p>1632年英皇查理一世授予他骑士爵位，1635年画出了他的绝作《查理一世狩猎》，建立了法兰德斯艺术及英国美术学校的基础，1641年逝世于伦敦。</p><p><img src="https://image-static.segmentfault.com/195/477/1954773276-66b5c7bc38bd9" alt="图片" style="zoom:50%;"></p><hr><h3 id="希姆"><a href="#希姆" class="headerlink" title="希姆"></a>希姆</h3><p>巴洛克艺术：希姆  Jan Davidsz de Heem 1606 ~ 1683 Dutch</p><p>生于乌得勒支，1683年卒于安特卫普，荷兰静物画家，充分表现了法兰德斯巴洛克的风格，1636年移居至安特卫普后，几乎所有的作品皆在此地完成。希姆家族的画家还包括他的两个儿子Cornelis de Heem和Jan Jansz de Heem及其孙子David de Heem，他们的影响直到19世纪。</p><p><img src="https://image-static.segmentfault.com/162/984/1629840659-66c4627c6e468" alt="图片" style="zoom:50%;"></p><hr><h3 id="霍赫"><a href="#霍赫" class="headerlink" title="霍赫"></a>霍赫</h3><p>巴洛克艺术：霍赫 Pieter de Hooch 1629 ~ 1684 Dutch</p><p>为17世纪荷兰文艺美术家，出生于鹿特丹，在哈伦学习绘画，早年生活坎坷，曾给一富人做过仆人。他是维米尔的朋友并受其影响，后期作品多取材于市民中富裕阶层，着重表现音乐会、客人来访等，画面华丽。他对从门里或窗户观察而来的事物变化，如同心灵上的解脱一般。对其绘画风格产生影响的还有伦勃朗的学生卡洛·法布里修斯。</p><p><img src="https://image-static.segmentfault.com/375/849/3758491602-66b5c9ffd6390" alt="图片" style="zoom:50%;"></p><hr><h3 id="洛兰"><a href="#洛兰" class="headerlink" title="洛兰"></a>洛兰</h3><p>风景画之王：洛兰 Claude Lorrain 1600 ~ 1682 French</p><p>另名Claude Gelee，法国唯美风景画家，他的画比自然还要美丽和谐，由罗马乡村得来的灵感，用典雅的算法来阐述出。</p><p>20岁时到罗马，除了短暂的回到法国的两年外，其余皆在罗马渡其一生，直到19世纪中叶，仍影响着荷兰、法国、特别是英国的风景画家，透纳受惠尤多。</p><p>他和同时代的普桑并列为十七世纪伟大的古典主义风景画家，他对阳光反射的微妙运用和色彩的巧妙安排极大地影响了后来的画家，他的画作以描绘广阔宏伟的风景为特点，《西巴女王出访的海港》则是他以古典建筑遗址为画面背景的代表作品。</p><p><img src="https://image-static.segmentfault.com/293/247/2932477013-66b5ca98bc7c9" alt="图片" style="zoom:50%;"></p><hr><h3 id="普桑"><a href="#普桑" class="headerlink" title="普桑"></a>普桑</h3><p>法国古典大师：普桑 Nicolas Poussin 1594 ~ 1665 French</p><p>1594年生于诺曼底，1665年逝世于罗马，是一位于法国出生而活跃于意大利的画家，17世纪法国古典美术的实践者，影响法国美术路线迄今。普桑的艺术生涯几乎是在意大利度过的，他的一生有过欢乐，也有过绝望，但不管是在哪一个时期里，他始终是理性的。</p><p>普桑的作品大多取材神话、历史和宗教故事。画幅通常不大，但是精雕细琢，力求严格的素描和构图的完美，人物造型庄重典雅，富于雕塑感；作品构思严肃而富于哲理性，具有稳定静穆和崇高的艺术特色，他的画冷峻中含有深情，可以窥视到画家冷静的思考。</p><p><img src="https://image-static.segmentfault.com/251/696/2516962506-66b5cce911cb0" alt="图片" style="zoom:50%;"></p><hr><h3 id="扬·斯汀"><a href="#扬·斯汀" class="headerlink" title="扬·斯汀"></a>扬·斯汀</h3><p>生不逢时的天才：扬·斯汀 Jan Steen 1626 ~ 1679 Dutch</p><p>扬·斯汀是扬名世界的荷兰黄金时期画家。毋庸置疑的，一提起他的名字，就会令人联想到他画作中所隐含的幽默感，而令人会心一笑。然而，扬·斯汀不只是一个引人发笑的小丑而已，他完美的技巧和独创的画作编排风格，使他晋身于世界一流画家之林。</p><p><img src="https://image-static.segmentfault.com/153/249/1532491568-66b5cd8eaf593" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;委拉斯开兹&quot;&gt;&lt;a href=&quot;#委拉斯开兹&quot; class=&quot;headerlink&quot; title=&quot;委拉斯开兹&quot;&gt;&lt;/a&gt;委拉斯开兹&lt;/h3&gt;&lt;p&gt;巴洛克骑士：委拉斯开兹 Diego Velazquez 1599 ~ 1660 Spanish&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>矫饰主义画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/03/mannerism-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/03/mannerism-western-aesthetic-ios/</id>
    <published>2024-08-03T15:07:30.000Z</published>
    <updated>2024-08-20T09:29:54.816Z</updated>
    
    <content type="html"><![CDATA[<h3 id="柯列乔"><a href="#柯列乔" class="headerlink" title="柯列乔"></a>柯列乔</h3><p>巴洛克的酝酿者：柯列乔 Correggio 1489 ~ 1534 Italian</p><a id="more"></a><p>意大利文艺复兴时期画家，本名Antonio Allegri，出生于意大利帕尔马51公里外的柯列乔镇，因此便以出生地为名。据说他习画于其叔叔，而被安德烈亚·曼特尼亚和达芬奇影响至深。</p><p>他承袭并综合了文艺复兴盛期各家的娴熟技法，在空间和动感的表现上又有所突破，有人将其归类为矫饰主义画家，也有人认为他是巴洛克艺术的先驱。</p><p><img src="https://image-static.segmentfault.com/325/976/3259764112-66b346aeb1425" alt="图片" style="zoom:50%;"></p><hr><h3 id="丁托列托"><a href="#丁托列托" class="headerlink" title="丁托列托"></a>丁托列托</h3><p>天才快手：丁托列托 Tintoretto 1518 ~ 1594 Italian</p><p>丁托列托出生于威尼斯，父亲是染匠，他是父亲的长子，因此获得一个绰号“丁托列托”（意思是小染匠）。</p><p>丁托列托非常欣赏提香的作品，但两人始终没有任何接触，而提香也从来没有和他成为朋友。丁托列托一直以自学为主，并在自己的画室上书写上“Il disegno di Michelangelo ed il colorito di Tiziano”（米开朗基罗的设计和提香的色彩）。</p><p><img src="https://image-static.segmentfault.com/340/510/3405100243-66b3472426693" alt="图片" style="zoom:50%;"></p><hr><h3 id="布隆齐诺"><a href="#布隆齐诺" class="headerlink" title="布隆齐诺"></a>布隆齐诺</h3><p>冷峻的矫饰风格：布隆齐诺 Agnolo Bronzino 1503 ~ 1572 Italian</p><p>布隆齐诺是佛罗伦萨画家蓬托莫（Pontormo）的弟子，亦受米开朗基罗（Michelangelo）影响。起先为多斯加尼大公，美第奇家族的科西莫一世（Cosimo I de’ Medici）的御用画师，是最重要的矫饰主义画家之一。</p><p>布隆齐诺专注于表现超乎人性的典雅与拘谨，和他的老师蓬托莫那种强烈的感性大异其趣。他从米开朗基罗所学有限，大约只有前缩法（fore-shortening）的技巧。</p><p><img src="https://image-static.segmentfault.com/386/048/3860485585-66b347af8f545" alt="图片" style="zoom:50%;"></p><hr><h3 id="格列柯"><a href="#格列柯" class="headerlink" title="格列柯"></a>格列柯</h3><p>表现主义先驱：格列柯 El Greco 1541 ~ 1614 Spanish</p><p>被誉为是西班牙最伟大的画家之一，从他的作品，可看出其广受多家影响的渊源，如：提香（Titian）、米开朗基罗（Michelangelo）、巴萨诺（Bassano）、拉斐尔（Raphael）、丢勒（Durer）、以及蓬托莫（Pontormo）、帕米贾尼诺（Parmigianino）等意大利中部矫饰主义画家。</p><p>格列柯糅合各家之长形成极端个人化的矫饰主义风格。他用色阴沉而尖锐，常用蓝色、黄色、鲜绿和生动的粉紫色作强烈对比，画中人物肢体刻意拉长，呈现神经质似的紧张感，使其作品具有高度的个人色彩。格列柯那忘形而热烈的风格，随着时间更趋明显，常常反复地表现在同一主题之上。</p><p><img src="https://image-static.segmentfault.com/428/521/4285210020-66b3492e39725" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/370/057/3700578893-66b1fffe03bc2" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;柯列乔&quot;&gt;&lt;a href=&quot;#柯列乔&quot; class=&quot;headerlink&quot; title=&quot;柯列乔&quot;&gt;&lt;/a&gt;柯列乔&lt;/h3&gt;&lt;p&gt;巴洛克的酝酿者：柯列乔 Correggio 1489 ~ 1534 Italian&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>文艺复兴盛期画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/02/the-booming-renaissance-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/02/the-booming-renaissance-western-aesthetic-ios/</id>
    <published>2024-08-02T15:07:30.000Z</published>
    <updated>2024-08-20T09:28:33.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="米开朗基罗"><a href="#米开朗基罗" class="headerlink" title="米开朗基罗"></a>米开朗基罗</h3><p>艺术之神：米开朗基罗 Michelangelo Di lodovico Buonarroti Simoni 1475 ~ 1564 Italian</p><a id="more"></a><p>意大利文艺复兴时期的雕刻家、画家、建筑师和诗人，对西方艺术有着无以伦比的功劳，出身为佛罗伦萨的名门，他是美学的巨人，上帝借由他来传达美学给世人。</p><p>米开朗基罗脾气暴躁，不合群，和达芬奇与拉斐尔都合不来，经常和他的恩主顶撞，但他一生追求艺术的完美，坚持自己的艺术思路。他于1564年在罗马去世，他的风格影响了几乎三个世纪的艺术家。</p><p>人们除了尊敬他外，别无其他形容词，他的艺术造诣使他在史学地位上流传数百年而不坠，他广泛地被认为超越凡人而如神一般，用以说明非凡的成就。</p><p><img src="https://image-static.segmentfault.com/421/392/4213923699-66b309529ad52" alt="图片" style="zoom:50%;"></p><hr><h3 id="乔尔乔内"><a href="#乔尔乔内" class="headerlink" title="乔尔乔内"></a>乔尔乔内</h3><p>文艺复兴盛期：乔尔乔内 Giorgio o Zorzi da Castelfranco 1477 ~ 1510 Italian</p><p>意大利画家，出生于威尼斯附近的小镇卡斯泰尔弗兰科学（Castelfranco），后前往威尼斯，曾随贝利尼学绘画，与著名画家提香结为同学。曾被聘用为名流画肖像，为大型建筑物、宫殿和教堂装饰壁画，1510年因鼠疫去世。</p><p>有关他的经历是稀少而不正确的，跟随贝利尼学习时无留下任何有签名的作品，大皆为后人的臆测，他故意不作底稿就直接地作画。他在风景画及裸体画方面，作了很重要的创新，风景画方面从史诗寓言式跳脱，裸体画开启以此为主题材的现代作风。</p><p><img src="https://image-static.segmentfault.com/427/610/4276105019-66b30a8a8eb91" alt="图片" style="zoom:50%;"></p><hr><p>达芬奇</p><p>文艺复兴的巨人：达芬奇 Leonardo Da Vinci 1452 ~ 1519 Italian</p><p>意大利文艺复兴三杰之一，也是整个欧洲文艺复兴时期最完美的代表。他是一位思想深邃、学识渊博、多才多艺的画家、寓言家、雕塑家、发明家、哲学家、音乐家、医学家、生物学家、地理学家、建筑工程师和军事工程师。</p><p>他是一位天才，他一面热心于艺术创作和理论研究，研究如何用线条与立体造型去表现形体的各种问题；另一方面他也同时研究自然科学，为了真实感人的艺术形象，他广泛地研究与绘画有关的光学、数学、地质学、生物学等多种学科。达芬奇的艺术实践和科学探索精神对后代产生了重大而深远的影响，科学理念和艺术的结合，超越其时代一世纪以上。</p><p><img src="https://image-static.segmentfault.com/508/726/508726561-66b30b91bc212" alt="图片" style="zoom:50%;"></p><hr><p>拉斐尔</p><p>文艺复兴画圣：拉斐尔 Raphael ( Raffaello Sanzio ) 1483 ~ 1520 Italian</p><p>拉斐尔出生于意大利西北威尼斯和佛罗伦萨之间马尔凯省的一个小镇乌尔比诺（Urbino），父亲是公爵的法院画家。拉斐尔在父亲的感染下，年幼时就对绘画产生了极大的兴趣。</p><p>他的著名宗教画圣母系列将宗教的虔诚和非宗教的美貌有机地融为一体；他为梵蒂冈教宗居室创作的大型壁画《雅典学园》是经典之作，他将柏拉图和亚里士多德，将基督教和异教，统统融合在一起，创造出和谐的场面。</p><p>他的性情平和、文雅，和他的画作一样。拉斐尔于1520年高烧猝逝于罗马，终年37岁，葬于万神庙。</p><p><img src="https://image-static.segmentfault.com/149/212/1492123517-66b30ff215f80" alt="图片" style="zoom:50%;"></p><hr><p>贝利尼</p><p>威尼斯画派之父：贝利尼 Giovanni Bellini 1430 ~ 1516 Italian</p><p>出生于意大利的威尼斯，威尼斯画派的主要奠基人是贝利尼家族父子三人，即父亲雅科波·贝利尼（1400年 - 1470年），其子真蒂莱·贝利尼（Gentile Bellini）和乔瓦尼·贝利尼（Giovanni Bellini），他们最初的艺术都从佛罗伦萨画派的作品中得到启迪。</p><p>在文艺复兴时期可和佛罗伦萨与罗马相提并论，他提升了对注重现实的程度，对事实认知的重要，和关乎外形及色彩的知觉。</p><p>他灵巧的户外写真本领，表现在风景的描绘，以及光的熟练运用，不仅诉说在季节里，甚可达至日时的阶段，在当时就可发挥出其支配力，并深深地影响着二位出色弟子乔尔乔内Giorgione（1477年 - 1510年）和提香Titian（1488年 - 1576年）。贝利尼于1516年逝世于威尼斯。</p><p><img src="https://image-static.segmentfault.com/153/550/153550392-66b310d4804c3" alt="图片" style="zoom:50%;"></p><hr><p>提香</p><p>油画技巧革新者：提香 Titian 1487 ~ 1576 Italian</p><p>伟大的威尼斯画家，意大利文艺复兴盛期威尼斯派。出生在意大利威尼斯北部风景秀丽的山区小镇卡多莱，12岁时父亲带他游历威尼斯，后来提香再次来到威尼斯便进了贝利尼的工作室学画，从此几乎一生都没有离开过威尼斯。当贝利尼和乔尔乔内相继亡故后，提香就完全支配着此共和国的美术地位。</p><p>“提香所作的就是最著名的、最伟大的工作”，如此的被形容，但他的艺术成就并不能代表他的个性，他是贪得无厌之徒，并利用其身份与地位去助长自我的目的。</p><p><img src="https://image-static.segmentfault.com/290/276/2902762508-66c4619eec72f" alt="图片" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/370/057/3700578893-66b1fffe03bc2" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;米开朗基罗&quot;&gt;&lt;a href=&quot;#米开朗基罗&quot; class=&quot;headerlink&quot; title=&quot;米开朗基罗&quot;&gt;&lt;/a&gt;米开朗基罗&lt;/h3&gt;&lt;p&gt;艺术之神：米开朗基罗 Michelangelo Di lodovico Buonarroti Simoni 1475 ~ 1564 Italian&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>文艺复兴北欧画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/08/01/the-northern-renaissance-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/08/01/the-northern-renaissance-western-aesthetic-ios/</id>
    <published>2024-08-01T15:07:30.000Z</published>
    <updated>2024-08-20T09:26:18.707Z</updated>
    
    <content type="html"><![CDATA[<h3 id="勃鲁盖尔"><a href="#勃鲁盖尔" class="headerlink" title="勃鲁盖尔"></a>勃鲁盖尔</h3><p>农夫画家：勃鲁盖尔 Pieter Bruegel the Elder 1525 ~ 1569 Flemish</p><a id="more"></a><p>法兰德斯画家（比利时西部一省，曾在15-17世纪建国，领土跨越今荷兰西南部、比利时西部、法国北部一小块），以地景与农民景象的画作闻名。根据加勒·凡·曼德尔的记载，他出生于邻近布雷达（Breda）的伯格（Broghel）。他是彼得·库克·范·阿尔斯特（Pieter Coecke van Aelst）的徒弟。1551年，他成为安特卫普的著名艺术家，曾游历意大利。</p><p>在西方社会，他是第一批以个人需要而作画的地景画家，跳脱过去艺术沦为宗教语言故事背景的窠臼。在1565年的冬季风景画，是当时正处于中世纪寒冷时期（14世纪 - 19世纪中，Little Ice Age）的严冬明确证明。</p><p><img src="https://image-static.segmentfault.com/217/687/2176874504-66b200106dfbe" alt="Image" style="zoom:50%;"></p><hr><h3 id="荷尔拜因"><a href="#荷尔拜因" class="headerlink" title="荷尔拜因"></a>荷尔拜因</h3><p>肖像画家第一人：荷尔拜因 Hans Holbein the Younger 1497 ~ 1543 Germany</p><p>荷尔拜因是德国画家，生于德国的巴伐利亚，1515年随兄长至瑞士的Basel，可能是北欧最善于心理刻画的写实肖像画家。他早年的肖像画显示出了他刻画人物特性的天赋，而他的宗教作品表明他是很冷酷的写实画家或装饰画家，而不是虔诚的宗教画家。</p><p>1532年，他二度造访伦敦，荷尔拜因很成功地为许多外国商人画像，和外交圈来往并获朝廷的注意。他的肖像画，有等身大小的，也有画成纤细画（miniature）的，比他早年的作品更简略，这是因为他强调细节，及根据素描作画，使他对画面的处理与感受比较不敏锐了。</p><p><img src="https://image-static.segmentfault.com/794/385/794385275-66b200204bed4" alt="Image" style="zoom:50%;"></p><hr><h3 id="丢勒"><a href="#丢勒" class="headerlink" title="丢勒"></a>丢勒</h3><p>北欧艺术的宗师：丢勒 Albrecht Durer 1471 ~ 1528 Germany</p><p>丢勒生于纽伦堡，德国画家、版画家及木版画设计家，为文艺复兴时期德国重要的画家及理论家，创造许多肖像画和铜雕。他的作品中，以版画最具影响力。</p><p>他是最出色的木刻版画和铜版画家之一。他的水彩风景画是他最伟大的成就之一，这些作品气氛和情感表现得极其生动。1505 - 07年当他第二次意大利之旅时，遇上Bellini，从其得到大量的美术理论根基，完成自己的论著，但要想了解其思想却非常不容易。</p><p><img src="https://image-static.segmentfault.com/582/610/582610874-66b2002f960f3" alt="图片" style="zoom:50%;"></p><hr><h3 id="梅姆林"><a href="#梅姆林" class="headerlink" title="梅姆林"></a>梅姆林</h3><p>文艺复兴北欧：梅姆林 Hans Memling 1430 ~ 1495 Flemish</p><p>梅姆林生于德国塞利根施塔特（Seligenstadt），法兰德斯画家，他在尼德兰受到艺术训练，可能曾从学于韦登 R.vander。</p><p>1465年成为布鲁日的市民，从事宗教画和肖像画的绘制。他是位人像的大师，非常详细地描绘脸部而产生灿烂的活力，人格特色被敏锐地显现，对象大多为Brugge的要人及来访的外国贵族。梅姆林的艺术风格恬静优美，绘制保持了凡·艾克技法传统。</p><p><img src="https://image-static.segmentfault.com/169/790/1697908581-66b2003f1f6d1" alt="Image" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/370/057/3700578893-66b1fffe03bc2" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;勃鲁盖尔&quot;&gt;&lt;a href=&quot;#勃鲁盖尔&quot; class=&quot;headerlink&quot; title=&quot;勃鲁盖尔&quot;&gt;&lt;/a&gt;勃鲁盖尔&lt;/h3&gt;&lt;p&gt;农夫画家：勃鲁盖尔 Pieter Bruegel the Elder 1525 ~ 1569 Flemish&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>文艺复兴初期画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/07/31/the-early-renaissance-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/07/31/the-early-renaissance-western-aesthetic-ios/</id>
    <published>2024-07-31T15:07:30.000Z</published>
    <updated>2024-08-20T09:25:47.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安吉利科"><a href="#安吉利科" class="headerlink" title="安吉利科"></a>安吉利科</h3><p>修士画家：安吉利科 Fra Angelico 1395 ~ 1455 Italian</p><a id="more"></a><p>意大利佛罗伦萨画派画家，生于佛罗伦萨附近的维琪奥，1455年2月18日卒于罗马。原名圭多·迪彼得罗（Guido di Pietro），约1420年左右进入修道院，取名菲耶索基的乔瓦尼（Giovanni da Fiesole），安吉利科（意为天使）是后人给他的美称。</p><p>安吉利科在出家之前，他为教堂作画，出家后也以画著名。现存最早作品是1429年完成的祭坛画《圣彼得殉教》，风格比较保守。30年代以后，其作品迅速吸收了马萨乔的新风格以及透视画法等新技法，在僧侣的虔诚之外，又具有新时代气息。</p><p>安吉利科死于罗马并埋葬于S. Maria sopra Minerva教堂，墓碑迄今仍在，长久的被称为“beatoangelico”（神保佑的Angelico），直至1984年才经由梵蒂冈正式地给予赐福。</p><p><img src="https://image-static.segmentfault.com/208/679/2086798309-66b1ffbde3313" alt="Image" style="zoom:50%;"></p><hr><h3 id="波提切利"><a href="#波提切利" class="headerlink" title="波提切利"></a>波提切利</h3><p>美丽与哀愁：波提切利 Sandro Botticelli 1445 ~ 1510 Italian</p><p>出生于意大利佛罗伦萨，一个手工业者地中产阶级家庭，为文艺复兴时期的主要画家，以非常高优雅的样式来表现他潜在的能力，却无法得到当时的认同，只能郁闭于自己的画作生命中，其唯一的弟子是儿子Filippino Lippi。</p><p>在15世纪80年代和90年代，波提切利是佛罗伦萨最出名的艺术家。他的风格到了19世纪，又被大力推崇，而且被认为是拉斐尔的前奏。</p><p>他宗教人文主义思想明显，充满世俗精神，代表作有《三王来拜》、《圣塞巴斯蒂安》等。后期的绘画中又增加了许多以古典神话为题材的作品，风格典雅、秀美，特别是他大量采用教会反对的异教题材，大胆地画全裸的人物，对以后绘画的影响很大。《春》和《维纳斯的诞生》是最能体现他绘画风格的代表性作品。</p><p><img src="https://image-static.segmentfault.com/218/922/2189227895-66b1ffd15d906" alt="Image" style="zoom:50%;"></p><hr><h3 id="吉兰达约"><a href="#吉兰达约" class="headerlink" title="吉兰达约"></a>吉兰达约</h3><p>文艺复兴初期：吉兰达约 Domenico Ghirlandaio 1449 ~ 1494 Italian</p><p>佛罗伦萨画家，吉兰达约和当时的波提切利相比，为较旧的风格，主要在佛罗伦萨教堂的壁画工作，常在宗教画里加上个人肖像，来表现出彼时代居民的生活。</p><p>吉兰达约的画法是用简单率直的方式来表现出亲切近人的风格，直至19世纪才被视为15世纪佛罗伦萨画家之领导者，最有名的弟子为米开朗基罗。</p><p><img src="https://image-static.segmentfault.com/167/868/1678681886-66b1ffe065a32" alt="Image" style="zoom:50%;"></p><hr><h3 id="曼特尼亚"><a href="#曼特尼亚" class="headerlink" title="曼特尼亚"></a>曼特尼亚</h3><p>文艺复兴初期：曼迪那 Andrea Mantegna 1431 ~ 1506 Italian</p><p>1431年生于Vicenza附近，为意大利文艺复兴画家与雕刻家，从小被美术家收养，但他很快地就靠其天分而得到美术方面的技巧。</p><p>1460年，他移居曼多，担任宫廷画家。他在那里的城堡画了一幅《婚礼堂》（Camera degli Sposi）壁画，以纪念贡萨格（Gonzaga）家族。画在墙壁上的诸多人像，看起来俨然是室内空间的延续，同时，在天花板上画了一座阳台，阳台上的人则在广阔的天空之下俯视室内。这是文艺复兴时代第一个完全有“仰角透视”（Sotto in Su）的幻觉装饰画。这种构想在拉斐尔（Raphael）和科雷吉奥（Correggio）之前没有人加以探讨，直到巴洛克时代始得充分发展。</p><p><img src="https://image-static.segmentfault.com/397/695/3976957020-66b1ffefe8f0e" alt="Image" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/370/057/3700578893-66b1fffe03bc2" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安吉利科&quot;&gt;&lt;a href=&quot;#安吉利科&quot; class=&quot;headerlink&quot; title=&quot;安吉利科&quot;&gt;&lt;/a&gt;安吉利科&lt;/h3&gt;&lt;p&gt;修士画家：安吉利科 Fra Angelico 1395 ~ 1455 Italian&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>哥特艺术画家油画作品欣赏｜西洋美术风象iOS</title>
    <link href="http://lesliewong.cn/2024/07/30/gothic-art-western-aesthetic-ios/"/>
    <id>http://lesliewong.cn/2024/07/30/gothic-art-western-aesthetic-ios/</id>
    <published>2024-07-30T15:07:30.000Z</published>
    <updated>2024-08-20T09:25:22.107Z</updated>
    
    <content type="html"><![CDATA[<h3 id="奇马布埃"><a href="#奇马布埃" class="headerlink" title="奇马布埃"></a>奇马布埃</h3><p>生机勃勃的拜占庭：奇马布埃 Cimabue Alias Bencivieni Di Pepo 1240 ~ 1302 Italian</p><a id="more"></a><p>生于佛罗伦萨，卒于比萨。原名本奇维耶尼·迪佩波，奇马布埃是其绰号。他是13世纪后半期首先进行风格革新的画家，并且是乔托的老师，因而被奉为标志文艺复兴艺术开始从中世纪旧艺术转化的先锋。</p><p>他的艺术承袭中世纪拜占庭风格而又有所创新，与佛罗伦萨城市共和国在13世纪后半期的蓬勃发展相呼应，传述了新时代的资讯。现存主要作品为佛罗伦萨乌菲齐美术馆藏的祭坛画，构图布局及形象描绘仍承袭拜占庭风格。</p><p><img src="https://image-static.segmentfault.com/360/064/3600642428-66a89f348f7e5_fix732" style="zoom: 50%;"></p><hr><h3 id="杜乔"><a href="#杜乔" class="headerlink" title="杜乔"></a>杜乔</h3><p>锡耶纳画派宗师：杜乔 Duccio di Buoninsegna 1255 ~ 1319 Italian</p><p>杜乔生于锡耶纳，从他的作品中可以看出意大利艺术的哥特传统发展到了最高峰，与奇马布埃同时代，被认为是锡耶纳画派（Sienese School）创始人，杜乔的作品源自于拜占庭风格，但也将人文精神融入其中，使画面看起来更显得气势磅礴。</p><p>杜乔最伟大的作品是《宝座上的圣母与圣婴》，这幅作品是受锡耶纳大教堂之托于1308年开始绘制的，1311年作品完成后举行了盛大的庆典。</p><p><img src="https://image-static.segmentfault.com/719/374/719374871-66a89e5b751b5_fix732" style="zoom:50%;"></p><hr><h3 id="乔托"><a href="#乔托" class="headerlink" title="乔托"></a>乔托</h3><p>西洋绘画之父：乔托 Giotto di Bondone 1267 ~ 1337 Italian</p><p>佛罗伦萨画家和建筑师，被公认为文艺复兴初期最有天分的美术家，他的作品给予从束缚的中世纪解放出的力量。</p><p>1267年生于靠近佛罗伦萨的Vespignano，教皇称为“Giotto surpassed all other painters of his time”，1334年Florence给Giotto大师的称谓，被认定为是意大利文艺复兴时期的开创者，被誉为“欧洲绘画之父”。</p><p>乔托晚年时画风有点改变，当时哥特式艺术盛行，宗教人物的身长都一律加长并增加漂浮感，但他著名的透视背景画风依然没有改变。他死后因黑死病在欧洲盛行，因此到达芬奇的时期，约有100年的断层。</p><p><img src="https://image-static.segmentfault.com/359/331/3593316076-66a89f8b0d353_fix732" style="zoom:50%;"></p><hr><h3 id="扬·凡·艾克"><a href="#扬·凡·艾克" class="headerlink" title="扬·凡·艾克"></a>扬·凡·艾克</h3><p>油彩的改革者：扬·凡·艾克 Jan van Eyck 1395 ~ 1441 Flemish</p><p>佛兰德斯画家，作品多为肖像及宗教题材的壁画，是早期尼德兰画派最伟大的画家之一，也是十五世纪北欧后哥特式绘画的创始人，油画形成时期的关键性人物。因其对油画艺术技巧的纵深发展做出了独特的贡献，被誉为“油画之父“。</p><p>1425年得到Burgundy公爵的特别信任，参与一切私人事务，曾经充任使节到过葡萄牙等地。他以写实的精细描写和微妙的光影表现，使作品闻名于世。他把神圣的内容拉入现实世界中，着力描绘现实生活、现世人生的丰富多彩。</p><p><img src="https://image-static.segmentfault.com/397/579/3975796305-66a89eac65ebd_fix732" style="zoom:50%;"></p><hr><h3 id="波希"><a href="#波希" class="headerlink" title="波希"></a>波希</h3><p>超现实主义前世教主：波希 Hieronymus Bosch 1450 ~ 1516 Dutch</p><p>他出生于荷兰与比利时的边境，一生终老于此，加入Notre Dame宗教组织，并为这城镇的教堂工作，负责祭坛的图画，他的艺术成就却卓著于外地。</p><p>他多数的画作多在描绘罪恶与人类道德的沉沦，以恶魔、半人半兽甚至是机械的形象来表现人的邪恶。他的图画复杂，有高度的原创性、想象力，并大量使用各种象征与符号，其中有些甚至在他的时代中也非常晦涩难解，波希被认为是20世纪的超现实主义的启发者之一。</p><p><img src="https://image-static.segmentfault.com/263/462/2634620313-66a89fcdd22b1_fix732" style="zoom:50%;"></p><p><a href="https://apps.apple.com/cn/app/%E8%A5%BF%E6%B4%8B%E7%BE%8E%E6%9C%AF%E9%A3%8E%E8%B1%A1-%E8%89%BA%E6%9C%AF%E5%90%8D%E7%94%BB%E7%80%91%E5%B8%83%E6%B5%81/id6476061688" target="_blank" rel="noopener"><img src="https://image-static.segmentfault.com/142/996/1429961808-66a8a28fdc40e" alt="img"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;奇马布埃&quot;&gt;&lt;a href=&quot;#奇马布埃&quot; class=&quot;headerlink&quot; title=&quot;奇马布埃&quot;&gt;&lt;/a&gt;奇马布埃&lt;/h3&gt;&lt;p&gt;生机勃勃的拜占庭：奇马布埃 Cimabue Alias Bencivieni Di Pepo 1240 ~ 1302 Italian&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/categories/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/categories/iOS/%E7%BE%8E%E6%9C%AF/"/>
    
    
      <category term="iOS" scheme="http://lesliewong.cn/tags/iOS/"/>
    
      <category term="美术" scheme="http://lesliewong.cn/tags/%E7%BE%8E%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>算法思维体操：基于generator生成器自己实现Async/Await（TypeScript）</title>
    <link href="http://lesliewong.cn/2023/02/23/generator-to-write-async-await-typescript/"/>
    <id>http://lesliewong.cn/2023/02/23/generator-to-write-async-await-typescript/</id>
    <published>2023-02-23T15:07:30.000Z</published>
    <updated>2024-01-18T05:06:13.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现Async-Await"><a href="#实现Async-Await" class="headerlink" title="实现Async/Await"></a>实现Async/Await</h3><p>要挑战的任务是使用JavaScript的generator生成器来实现Async/Await。</p><a id="more"></a><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>下面是一个Async/Await函数的示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">await</span> fetchFromNetwork(value + <span class="string">'-1'</span>);</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">await</span> fetchFromNetwork(value + <span class="string">'-2'</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result3 = <span class="keyword">await</span> failedFetchFromNetwork();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'Error fetching from network'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result1 + <span class="string">' '</span> + result2;</span><br><span class="line">&#125;</span><br><span class="line">doSomething(<span class="string">'http://google.com'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got result: <span class="subst">$&#123;r&#125;</span>`</span>))</span><br><span class="line">    .catch(<span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure><p>我们需要使用generator生成器和一个特别的封装函数“asynk”来实现同样功能。等效的示例为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doSomething = asynk(<span class="function"><span class="keyword">function</span>* (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-1'</span>);</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-2'</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result3 = <span class="keyword">yield</span> failedFetchFromNetwork();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'Error fetching from network'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result1 + <span class="string">' '</span> + result2;</span><br><span class="line">&#125;);</span><br><span class="line">doSomething(<span class="string">'http://google.com'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got result: <span class="subst">$&#123;r&#125;</span>`</span>))</span><br><span class="line">    .catch(<span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure><p>关于“asynk“的注意事项：</p><ol><li>它接收一个generator生成器函数并返回一个新函数；</li><li>当返回的函数被调用时，它应该返回一个Promise期约。Promise期约应当对generator生成器函数的返回值有所处理；</li><li>返回函数的类型特征应该和传入generator生成器函数的类型特征匹配。唯一的例外是，如果generator生成器函数返回一个非Promise期约的类型，返回函数应该返回一个与那个类型相对应的Promise期约。</li></ol><h4 id="待处理事项"><a href="#待处理事项" class="headerlink" title="待处理事项"></a>待处理事项</h4><ul><li>如果愿意的话，你可以先实现无类型的方案。有些人觉得使用类型有所帮助，另外一些人则觉得后续添加类型更容易；</li><li>先关注控制流，然后才是参数值返回值可能有所帮助。</li></ul><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>你不能使用原生的Async/Await；</li><li>请不要直接查阅与”如何使用generator生成器实现Async/Await“相关的网上资料。</li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>下面是一些你会觉得有用的链接。请悉听尊便访问这些链接，但务必仅限于此。</p><ul><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator</a></p></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next</a></p></li></ul><p>下面的类型定义或许有所裨益：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Generator&lt;T = unknown, TReturn = any, TNext = unknown&gt; <span class="keyword">extends</span> Iterator&lt;T, TReturn, TNext&gt; &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.</span></span><br><span class="line">    next(...args: [] | [TNext]): IteratorResult&lt;T, TReturn&gt;;</span><br><span class="line">    <span class="keyword">return</span>(value: TReturn): IteratorResult&lt;T, TReturn&gt;;</span><br><span class="line">    <span class="keyword">throw</span>(e: <span class="built_in">any</span>): IteratorResult&lt;T, TReturn&gt;;</span><br><span class="line">    [Symbol.iterator](): Generator&lt;T, TReturn, TNext&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IteratorYieldResult&lt;TYield&gt; &#123;</span><br><span class="line">    done?: <span class="literal">false</span>;</span><br><span class="line">    value: TYield;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IteratorReturnResult&lt;TReturn&gt; &#123;</span><br><span class="line">    done: <span class="literal">true</span>;</span><br><span class="line">    value: TReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IteratorResult&lt;T, TReturn = <span class="built_in">any</span>&gt; = IteratorYieldResult&lt;T&gt; | IteratorReturnResult&lt;TReturn&gt;;</span><br></pre></td></tr></table></figure><h4 id="TypeScript代码模板："><a href="#TypeScript代码模板：" class="headerlink" title="TypeScript代码模板："></a>TypeScript代码模板：</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// See README.md for instructions.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> add type annotations.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asynk</span>(<span class="params">fn: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Playgroud for testing the code.</span></span><br><span class="line"><span class="built_in">console</span>.clear();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">countUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = countUp();</span><br><span class="line"><span class="built_in">console</span>.log(g.next());</span><br><span class="line"><span class="built_in">console</span>.log(g.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">// const playground = asynk(function* () &#123;</span></span><br><span class="line"><span class="comment">//     const result = yield Promise.resolve('hello');</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// playground().catch(console.error)</span></span><br></pre></td></tr></table></figure><h4 id="最终实现："><a href="#最终实现：" class="headerlink" title="最终实现："></a>最终实现：</h4><p>无类型的JavaScript版本：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asynk</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Initialize the generator function, which might have signatures,</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Extract the next() queue fisrt, then iterate another initialized generator</span></span><br><span class="line">      <span class="keyword">const</span> runner = fn(...args);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> promiseCallbackQueue = [</span><br><span class="line">          (res, slaveRunner) =&gt; slaveRunner.next(res).value,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">let</span> result = runner.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First round, collect promiseCallback</span></span><br><span class="line">        <span class="keyword">while</span> (!result.done &amp;&amp; <span class="built_in">String</span>(result.value) === <span class="string">'[object Promise]'</span>) &#123;</span><br><span class="line">          promiseCallbackQueue.push(</span><br><span class="line">            (res, slaveRunner) =&gt; slaveRunner.next(res).value</span><br><span class="line">          );</span><br><span class="line">          result = runner.next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        Second round, iterate another generator promise chain and pass promised value, by using the trick of event loop</span></span><br><span class="line"><span class="comment">        setTimeout -&gt; MacroQueue</span></span><br><span class="line"><span class="comment">        Promise resolve -&gt; MicroQueue</span></span><br><span class="line"><span class="comment">        For each setTimeout, its inner promise resolve will call in advance of the latter setTimeout, because of MicroQueue</span></span><br><span class="line"><span class="comment">        Drawback: initialize the given generator for twice.         </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">let</span> medium;</span><br><span class="line">        <span class="keyword">let</span> pcqLen = promiseCallbackQueue.length;</span><br><span class="line">        <span class="keyword">const</span> slaveRunner = fn(...args);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pcqLen; i++) &#123;</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> pm = promiseCallbackQueue[i](medium, slaveRunner);</span><br><span class="line">            medium = pm; <span class="comment">// To get the final yield value, would be Promise fisrt</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">String</span>(pm) === <span class="string">'[object Promise]'</span>) &#123;</span><br><span class="line">              pm.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">                medium = res; <span class="comment">// get the input value to yield function</span></span><br><span class="line">              &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              resolve(medium);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// catch operation</span></span><br><span class="line">        <span class="keyword">return</span> reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.clear();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">countUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = countUp();</span><br><span class="line"><span class="built_in">console</span>.log(g.next());</span><br><span class="line"><span class="built_in">console</span>.log(g.next());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> playground = asynk(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="string">'hello'</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">playground()</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">console</span>.log(r, <span class="string">'yes'</span>))</span><br><span class="line">  .catch(<span class="built_in">console</span>.error);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> failedFetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">  <span class="comment">// return Promise.reject(val);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doSomething = asynk(<span class="function"><span class="keyword">function</span>* (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result1 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-1'</span>);</span><br><span class="line">  <span class="keyword">const</span> result2 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-2'</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result3 = <span class="keyword">yield</span> failedFetchFromNetwork().catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Error fetching from network'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result1 + <span class="string">" "</span> + result2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">doSomething(<span class="string">'http://google.com'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got result: <span class="subst">$&#123;r&#125;</span>`</span>))</span><br><span class="line">  .catch(<span class="built_in">console</span>.error);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果：</span></span><br><span class="line"><span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// 'hello' 'yes'</span></span><br><span class="line"><span class="comment">// 'Got result: http://google.com-1 http://google.com-2'</span></span><br></pre></td></tr></table></figure><blockquote><p>思路：先使用一个while循环遍历generator生成器收集next次数，然后for循环再遍历generator生成器，前后传递生成器Promise.then得到的值，诀窍是使用setTimeout属于宏队列，promise属于微队列，同一次事件循环中setTimeout总会先于promise执行这一JS异步编程特性。</p><p>不足之处：generator生成器函数会被执行两次，如果在其中有声明console的话，会让人觉得有些奇怪，但是最终的返回值结果倒是正确。</p></blockquote><p>含类型的TypeScript版本：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Generator&lt;T = unknown, TReturn = any, TNext = unknown&gt;</span><br><span class="line">  <span class="keyword">extends</span> Iterator&lt;T, TReturn, TNext&gt; &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">NOTE:</span> 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.</span></span><br><span class="line">  next(...args: [] | [TNext]): IteratorResult&lt;T, TReturn&gt;;</span><br><span class="line">  <span class="keyword">return</span>(value: TReturn): IteratorResult&lt;T, TReturn&gt;;</span><br><span class="line">  <span class="keyword">throw</span>(e: <span class="built_in">any</span>): IteratorResult&lt;T, TReturn&gt;;</span><br><span class="line">  [Symbol.iterator](): Generator&lt;T, TReturn, TNext&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IteratorYieldResult&lt;TYield&gt; &#123;</span><br><span class="line">  done?: <span class="literal">false</span>;</span><br><span class="line">  value: TYield;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IteratorReturnResult&lt;TReturn&gt; &#123;</span><br><span class="line">  done: <span class="literal">true</span>;</span><br><span class="line">  value: TReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IteratorResult&lt;T, TReturn = <span class="built_in">any</span>&gt; =</span><br><span class="line">  | IteratorYieldResult&lt;T&gt;</span><br><span class="line">  | IteratorReturnResult&lt;TReturn&gt;;</span><br><span class="line"></span><br><span class="line">function asynk(fn: (...args: any) =&gt; Generator&lt;Promise&lt;any&gt;, any, string&gt;) &#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args: <span class="built_in">any</span></span>) =&gt;</span></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// Initialize the generator function, which might have signatures,</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// Extract the next() queue fisrt, then iterate another initialized generator</span></span><br><span class="line">      <span class="keyword">const</span> runner = fn(...args);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> promiseCallbackQueue = [</span><br><span class="line">          (res: <span class="built_in">any</span>, slaveRunner: <span class="built_in">any</span>) =&gt; slaveRunner.next(res).value,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">let</span> result = runner.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// First round, collect promiseCallback</span></span><br><span class="line">        <span class="keyword">while</span> (!result.done &amp;&amp; <span class="built_in">String</span>(result.value) === <span class="string">'[object Promise]'</span>) &#123;</span><br><span class="line">          promiseCallbackQueue.push(</span><br><span class="line">            (res, slaveRunner) =&gt; slaveRunner.next(res).value,</span><br><span class="line">          );</span><br><span class="line">          result = runner.next();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        Second round, iterate another generator promise chain and pass promised value, by using the trick of event loop</span></span><br><span class="line"><span class="comment">        setTimeout -&gt; MacroQueue</span></span><br><span class="line"><span class="comment">        Promise resolve -&gt; MicroQueue</span></span><br><span class="line"><span class="comment">        For each setTimeout, its inner promise resolve will call in advance of the latter setTimeout, because of MicroQueue</span></span><br><span class="line"><span class="comment">        Drawback: initialize the given generator for twice.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">let</span> medium: <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; | <span class="built_in">string</span>;</span><br><span class="line">        <span class="keyword">let</span> pcqLen = promiseCallbackQueue.length;</span><br><span class="line">        <span class="keyword">const</span> slaveRunner = fn(...args);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pcqLen; i++) &#123;</span><br><span class="line">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> pm = promiseCallbackQueue[i](medium, slaveRunner);</span><br><span class="line">            medium = pm; <span class="comment">// To get the final yield value, would be Promise fisrt</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">String</span>(pm) === <span class="string">'[object Promise]'</span>) &#123;</span><br><span class="line">              pm.then(<span class="function">(<span class="params">res: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">                medium = res; <span class="comment">// get the input value to yield function</span></span><br><span class="line">              &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              resolve(medium);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// catch operation</span></span><br><span class="line">        <span class="keyword">return</span> reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.clear();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">countUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = countUp();</span><br><span class="line"><span class="built_in">console</span>.log(g.next());</span><br><span class="line"><span class="built_in">console</span>.log(g.next());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> playground = asynk(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">yield</span> <span class="built_in">Promise</span>.resolve(<span class="string">'hello'</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">playground()</span><br><span class="line">  .then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">console</span>.log(r, <span class="string">'yes'</span>))</span><br><span class="line">  .catch(<span class="built_in">console</span>.error);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetchFromNetwork = <span class="function">(<span class="params">val: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> failedFetchFromNetwork = <span class="function">(<span class="params">val: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">  <span class="comment">// return Promise.reject(val);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doSomething = asynk(<span class="function"><span class="keyword">function</span>* (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result1 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-1'</span>);</span><br><span class="line">  <span class="keyword">const</span> result2 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-2'</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result3 = <span class="keyword">yield</span> failedFetchFromNetwork(value).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(result3);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'Error fetching from network'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result1 + <span class="string">' '</span> + result2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">doSomething(<span class="string">'http://google.com'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got result: <span class="subst">$&#123;r&#125;</span>`</span>))</span><br><span class="line">  .catch(<span class="built_in">console</span>.error);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果：</span></span><br><span class="line"><span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="comment">// &#123; result3: undefined &#125;</span></span><br><span class="line"><span class="comment">// 'hello' 'yes'</span></span><br><span class="line"><span class="comment">// &#123; result3: 'http://google.com' &#125;</span></span><br><span class="line"><span class="comment">// 'Got result: http://google.com-1 http://google.com-2'</span></span><br></pre></td></tr></table></figure><blockquote><p>处理原则: 让TypeScript校验不显红即可, 适当使用any和string.</p></blockquote><h4 id="其他实现参考："><a href="#其他实现参考：" class="headerlink" title="其他实现参考："></a>其他实现参考：</h4><h5 id="Babel-7，面向chrome-54"><a href="#Babel-7，面向chrome-54" class="headerlink" title="Babel 7，面向chrome 54"></a>Babel 7，面向chrome 54</h5><p><a href="https://babeljs.io/repl#?browsers=chrome 54&amp;build=&amp;builtIns=false&amp;corejs=3.21&amp;spec=false&amp;loose=false&amp;code_lz=MYewdgzgLgBAZgUysAFgMQE4gLYDkkDuIGA1jALwwAUAbgIYA2AlBQHwwDeAUDDBkgFcMYGAAUs2AJYQEAOn4QQDGglqMmAbi4BfLV1CRYcOpIYIAJmiSpMOfFCKkK1eszacefQcLETpchSUVNWYtXgB6cK8oIRFxHH95BAArBGAoEM0dPToIAE8wYHgBQqhJcBhzEABlHCQUSTAAcxCBBBZuXl4DaC8IAQYoAEZnOgITI2t0CXtHElaEGABqGAByAFoh1ayumB7YBQGoACZR8clJ5Gm7QmJ51zbltfXj7bCuqAw8j13d_b6jgBmM4TeAmMyWKa2PC3UhUHZdbR7OhXagIDBYDAdTy_PbgRRmWTozFUVYAUQxxHgU0aTXgEhgYFhJDeOJg2jZ_BiPkOgxGK1WayevJOWg5VVq2HqtNJKCgUAADgAuSJNEAgJqE0DYbZs2RQFAIMBUDDuHpKOQMDVUAAGAHEQAcEP1BkqYAASDgYbQ2phMPXAFGoKjmwnE4hMIA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=env%2Creact%2Cstage-2&amp;prettier=false&amp;targets=&amp;version=7.21.2&amp;externalPlugins=&amp;assumptions={}" target="_blank" rel="noopener">Babel Repl</a></p><p><em>输入：</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> failedFetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">  <span class="comment">// return Promise.reject(val);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">await</span> fetchFromNetwork(value + <span class="string">'-1'</span>);</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">await</span> fetchFromNetwork(value + <span class="string">'-2'</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result3 = <span class="keyword">await</span> failedFetchFromNetwork();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'Error fetching from network'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result1 + <span class="string">' '</span> + result2;</span><br><span class="line">&#125;</span><br><span class="line">doSomething(<span class="string">'http://google.com'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got result: <span class="subst">$&#123;r&#125;</span>`</span>))</span><br><span class="line">    .catch(<span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure><p><em>输出：</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncGeneratorStep</span>(<span class="params">gen, resolve, reject, _next, _throw, key, arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> info = gen[key](arg);</span><br><span class="line">    <span class="keyword">var</span> value = info.value;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (info.done) &#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">Promise</span>.resolve(value).then(_next, _throw);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_asyncToGenerator</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> gen = fn.apply(self, args);</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">_next</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        asyncGeneratorStep(gen, resolve, reject, _next, _throw, <span class="string">'next'</span>, value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">_throw</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        asyncGeneratorStep(gen, resolve, reject, _next, _throw, <span class="string">'throw'</span>, err);</span><br><span class="line">      &#125;</span><br><span class="line">      _next(<span class="literal">undefined</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> failedFetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">  <span class="comment">// return Promise.reject(val);</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">_x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _doSomething.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  _doSomething = _asyncToGenerator(<span class="function"><span class="keyword">function</span>* (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-1'</span>);</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-2'</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result3 = <span class="keyword">yield</span> failedFetchFromNetwork();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'Error fetching from network'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result1 + <span class="string">' '</span> + result2;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> _doSomething.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">doSomething(<span class="string">'http://google.com'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got result: <span class="subst">$&#123;r&#125;</span>`</span>))</span><br><span class="line">  .catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><blockquote><p>精华之处：_next和_throw函数的递归调用。</p></blockquote><h5 id="TypeScript-4-9-5，面向ES2015"><a href="#TypeScript-4-9-5，面向ES2015" class="headerlink" title="TypeScript 4.9.5，面向ES2015"></a>TypeScript 4.9.5，面向ES2015</h5><p><a href="https://www.typescriptlang.org/play?target=2#code/MYewdgzgLgBAZgUysAFgMQE4gLYDkkDuIGA1jALwwAUAbgIYA2AlBQHwwDeAUDDBkgFcMYGAAUs2AJYQEAOn4QQDGglqMmAbi4BfLV1CRYcOpIYIAJmiSpMOfFCKkK1eszacefQcLETpchSUVNWYtXgB6cK8oIRFxHH95BAArBGAoEM0dPToIAE8wYHgBQqhJcBhzEABlHCQUSTAAcxCBBBZuXl4DaC8IAQYoAEZnOgITI2t0CXtHElaEGABqGAByAFoh1ayumB7YBQGoACZR8clJ5Gm7QmJ51zbltfXj7bCuqAw8j13d-b6jgBmM4TeAmMyWKa2PC3UhUHZdbR7OhXagIDBYDAdTy-PbgRRmWTozFUVYAUQxxHgU0aTXgEhgYFhJDeOJg2jZ-BiPkOgxGK1WayevJOWg5VVq2HqtNJKCgUAADgAuSJNEAgJqE0DYbZs2RQFAIMBUDDuHpKOQMDVUAAGAHEQAcEP1BkqYAASDgYbQ2phMPXAFGoKjmwnE4hMIA" target="_blank" rel="noopener">TypeScript Playground</a></p><p><em>输入：</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> failedFetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">  <span class="comment">// return Promise.reject(val);</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">await</span> fetchFromNetwork(value);</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">await</span> fetchFromNetwork(value);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result3 = <span class="keyword">await</span> failedFetchFromNetwork();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'Error fetching from network'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result1 + result2;</span><br><span class="line">&#125;</span><br><span class="line">doSomething(<span class="string">'http://google.com'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got result: <span class="subst">$&#123;r&#125;</span>`</span>))</span><br><span class="line">    .catch(<span class="built_in">console</span>.error)</span><br></pre></td></tr></table></figure><p><em>输出：</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> __awaiter =</span><br><span class="line">  (<span class="keyword">this</span> &amp;&amp; <span class="keyword">this</span>.__awaiter) ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">thisArg, _arguments, P, generator</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">adopt</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> value <span class="keyword">instanceof</span> P</span><br><span class="line">        ? value</span><br><span class="line">        : <span class="keyword">new</span> P(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">            resolve(value);</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> (P || (P = <span class="built_in">Promise</span>))(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">fulfilled</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          step(generator.next(value));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">rejected</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          step(generator[<span class="string">'throw'</span>](value));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">        result.done</span><br><span class="line">          ? resolve(result.value)</span><br><span class="line">          : adopt(result.value).then(fulfilled, rejected);</span><br><span class="line">      &#125;</span><br><span class="line">      step((generator = generator.apply(thisArg, _arguments || [])).next());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="keyword">const</span> fetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> failedFetchFromNetwork = <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(val);</span><br><span class="line">  <span class="comment">// return Promise.reject(val);</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> __awaiter(<span class="keyword">this</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="keyword">void</span> <span class="number">0</span>, <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result1 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-1'</span>);</span><br><span class="line">    <span class="keyword">const</span> result2 = <span class="keyword">yield</span> fetchFromNetwork(value + <span class="string">'-2'</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result3 = <span class="keyword">yield</span> failedFetchFromNetwork();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">'Error fetching from network'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result1 + <span class="string">' '</span> + result2;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">doSomething(<span class="string">'http://google.com'</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">r</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Got result: <span class="subst">$&#123;r&#125;</span>`</span>))</span><br><span class="line">  .catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><blockquote><p>精华之处: step函数的递归调用.</p></blockquote><p><img src="https://image-static.segmentfault.com/279/129/279129796-63f8ef7a08979_fix732" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;实现Async-Await&quot;&gt;&lt;a href=&quot;#实现Async-Await&quot; class=&quot;headerlink&quot; title=&quot;实现Async/Await&quot;&gt;&lt;/a&gt;实现Async/Await&lt;/h3&gt;&lt;p&gt;要挑战的任务是使用JavaScript的generator生成器来实现Async/Await。&lt;/p&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="http://lesliewong.cn/categories/TypeScript/"/>
    
      <category term="算法" scheme="http://lesliewong.cn/categories/TypeScript/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://lesliewong.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="TypeScript" scheme="http://lesliewong.cn/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>算法思维体操：用JavaScript和Python自己实现reduceRight和map（链表）</title>
    <link href="http://lesliewong.cn/2023/02/22/reduceRight-map-polyfill-javascript-python/"/>
    <id>http://lesliewong.cn/2023/02/22/reduceRight-map-polyfill-javascript-python/</id>
    <published>2023-02-22T15:07:30.000Z</published>
    <updated>2024-01-18T05:05:30.494Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>我们从一个链表的构造函数开始，“cons”，它接收一个必要参数“head”及一个可选参数“tail”（相对于支持这样的实现的语言来说）。该构造函数返回一个链表的表示结构体，其中第一个元素为“head”，其余的元素被包裹在“tail“链表中。空链表的话用JavaScript中的undefined或Python中的None来表示。</p><a id="more"></a><p>举例来说，直到微小变化，”cons(1, cons(2, cons(3, cons(4))))”构造了一个含有4个元素的链表，”1 2 3 4“。</p><p>为了便于检查链表中的内容，我们定义了”listToString“方法来将链表转换为相应的字符串，其中链表元素之间用空格隔开。</p><p>”myMap“方法接收一个一元函数”fn“和一个链表”list“。它循序遍历链表中的每一个元素，并返回一个各元素都被”fn“转化过了的链表。</p><p>”myReduce”方法会对输入的链表从头到尾使用一个reducer函数“fn”，然后返回最终结果。比如，假设链表为“cons(1, cons(2, cons(3,)))”，“myReduce(fn, accm, list)”应该返回执行“fn(fn(fn(accm, 1), 2), 3)”得到的结果。</p><p>上述的三个方法都是使用递归实现的，巧妙运用了链表的递归结构。</p><h3 id="第1部分：实现“myReduceRight”"><a href="#第1部分：实现“myReduceRight”" class="headerlink" title="第1部分：实现“myReduceRight”"></a>第1部分：实现“myReduceRight”</h3><p>请实现“myReduceRight”方法。其类似于“myReduce”，不同之处在于它是从尾到头对输入的链表使用reducer函数“fn”的。比如，假设链表为“cons(1, cons(2, cons(3)))”，”myReduceRight(fn, accm, list)”应该返回执行“fn(1, fn(2, fn(3, accm)))”得到的结果。</p><p>要求：</p><ol><li>你<strong>需要</strong>使用递归来实现，而不是任何显式的for/while循环；</li><li>你<strong>不能</strong>在你的实现中使用先前已定义好的”listToString“、”myMap“和”myReduce“方法；</li><li>你<strong>不能</strong>修改原始链表。</li></ol><p>要检查你的实现的正确性，可以验证：</p><ul><li>”<code>myReduceRight(xTimesTwoPlusY, 0, exampleList)</code>“应该得到“20”；</li><li>“<code>myReduceRight(unfoldCalculation, accm, exampleList)</code>“应该表示为”fn(1, fn(2, fn(3, fn(4, accm))))”；</li><li>“<code>myReduceRight(printXAndReturnY, 0, exampleList)</code>“应该按照输入链表的逆序来打印内容。</li></ul><hr><h3 id="第2部分：实现”myMap2“"><a href="#第2部分：实现”myMap2“" class="headerlink" title="第2部分：实现”myMap2“"></a>第2部分：实现”myMap2“</h3><p>请基于“myReduceRight”方法实现”myMap2“，其应该在功能性上同质于”myMap“。</p><p>对实现的基本要求：</p><ol><li>你<strong>不能</strong>在你的实现中使用先前已定义好的”listToString“、”myMap“和”myReduce“方法；</li><li>你<strong>不能</strong>修改任何函数的输入输出特征，包括”myReduceRight“的输入输出特征；</li><li>你<strong>不能</strong>在借在”myReduceRight“中投机取巧来助力实现”myMap2“，例如向”myReduceRight“传递隐藏标志以表示特殊处理；</li><li>你<strong>不能</strong>使用任何语言原生的特殊数据结构（举例，C++中的”std::vector”，Java中的“ArrayList”，Python中的“list”）。</li></ol><p>如果你的实现满足以下尽可能多的要求，你将获得“加分”：</p><ol><li>不要使用任何显式的递归调用。特别地，避免在实现中声明调用“myMap2”；</li><li>不要在实现中使用任何显式的for/while循环。为此你需要探究下“myReduceRight”的巧妙用法；</li><li>不要修改原始链表。</li></ol><p>以下是你可以遵循的几个方向：</p><ul><li>列表翻转；</li><li>在reducer方法中修改链表；</li><li>巧妙地使用闭包和lambda函数来调整代码执行顺序。特别地，考虑考虑延时执行，如<code>(() -&gt; doSomething)()。</code></li></ul><p>要检查你的实现的正确性，可以验证：</p><ul><li>“<code>listToString(myMap2(plusOne, exampleList))</code>”应该得到“2 3 4 5”；</li><li>“<code>myMap2(printAndReturn, exampleList)</code>”应该按照正确的次序打印链表内容（“1 2 3 4”分别各占据一行而不是“4 3 2 1”）。</li></ul><hr><h4 id="JavaScript代码模板："><a href="#JavaScript代码模板：" class="headerlink" title="JavaScript代码模板："></a>JavaScript代码模板：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Refer to README for detailed instructions.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cons</span>(<span class="params">head, tail</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    head: head,</span><br><span class="line">    tail: tail,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToString</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!list) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!list.tail) &#123;</span><br><span class="line">    <span class="keyword">return</span> list.head.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list.head.toString() + <span class="string">' '</span> + listToString(list.tail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMap</span>(<span class="params">fn, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!list) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cons(fn(list.head), myMap(fn, list.tail));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReduce</span>(<span class="params">fn, accm, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!list) &#123;</span><br><span class="line">    <span class="keyword">return</span> accm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> myReduce(fn, fn(accm, list.head), list.tail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReduceRight</span>(<span class="params">fn, accm, list</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// [BEGIN] YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// [END] YOUR CODE HERE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMap2</span>(<span class="params">fn, list</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// [BEGIN] YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  <span class="comment">// [END] YOUR CODE HERE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> exampleList = cons(<span class="number">1</span>, cons(<span class="number">2</span>, cons(<span class="number">3</span>, cons(<span class="number">4</span>))));</span><br><span class="line">  <span class="keyword">let</span> plusOne = <span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> xTimesTwoPlusY = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * <span class="number">2</span> + y;</span><br><span class="line">  <span class="keyword">let</span> printXAndReturnY = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> unfoldCalculation = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="string">'fn('</span> + x + <span class="string">', '</span> + y + <span class="string">')'</span>;</span><br><span class="line">  <span class="keyword">let</span> printAndReturn = <span class="built_in">console</span>.log;</span><br><span class="line">  <span class="built_in">console</span>.log(listToString(exampleList), <span class="string">'should be 1 2 3 4'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(listToString(myMap(plusOne, exampleList)), <span class="string">'should be 2 3 4 5'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(myReduce(xTimesTwoPlusY, <span class="number">0</span>, exampleList), <span class="string">'should be 26'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    myReduce(unfoldCalculation, <span class="string">'accm'</span>, exampleList),</span><br><span class="line">    <span class="string">'should be fn(fn(fn(fn(accm, 1), 2), 3), 4)'</span></span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">console</span>.log(myReduceRight(xTimesTwoPlusY, <span class="number">0</span>, exampleList), <span class="string">'should be 20'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    myReduceRight(unfoldCalculation, <span class="string">'accm'</span>, exampleList),</span><br><span class="line">    <span class="string">'should be fn(1, fn(2, fn(3, fn(4, accm))))'</span></span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Below should output 4 3 2 1 each on a separate line:'</span>);</span><br><span class="line">  myReduceRight(printXAndReturnY, <span class="number">0</span>, exampleList);</span><br><span class="line">  <span class="built_in">console</span>.log(listToString(myMap2(plusOne, exampleList)), <span class="string">'should be 2 3 4 5'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The two outputs below should be equal:'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'First output:'</span>);</span><br><span class="line">  myMap(printAndReturn, exampleList);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Second output:'</span>);</span><br><span class="line">  myMap2(printAndReturn, exampleList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><h4 id="Python代码模板："><a href="#Python代码模板：" class="headerlink" title="Python代码模板："></a>Python代码模板：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Refer to README for detailed instructions.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, head, tail)</span>:</span></span><br><span class="line">        self.head = head</span><br><span class="line">        self.tail = tail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cons</span><span class="params">(head, tail=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> LinkedList(head, tail)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listToString</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> list <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> list.tail <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> str(list.head)</span><br><span class="line">    <span class="keyword">return</span> str(list.head) + <span class="string">" "</span> + listToString(list.tail)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMap</span><span class="params">(fn, list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> list <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> cons(fn(list.head), myMap(fn, list.tail))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myReduce</span><span class="params">(fn, accm, list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> list <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> accm</span><br><span class="line">    <span class="keyword">return</span> myReduce(fn, fn(accm, list.head), list.tail)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myReduceRight</span><span class="params">(fn, accm, list)</span>:</span></span><br><span class="line">    <span class="comment"># [BEGIN] YOUR CODE HERE</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># [END] YOUR CODE HERE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMap2</span><span class="params">(fn, list)</span>:</span></span><br><span class="line">    <span class="comment"># [BEGIN] YOUR CODE HERE</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="comment"># [END] YOUR CODE HERE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    exampleList = cons(<span class="number">1</span>, cons(<span class="number">2</span>, cons(<span class="number">3</span>, cons(<span class="number">4</span>))))</span><br><span class="line">    plusOne = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line">    xTimesTwoPlusY = <span class="keyword">lambda</span> x, y: x * <span class="number">2</span> + y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printXAndReturnY</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unfoldCalculation</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fn(%s, %s)"</span> % (str(x), str(y))</span><br><span class="line">    printAndReturn = <span class="keyword">print</span></span><br><span class="line">    print(listToString(exampleList), <span class="string">"should be 1 2 3 4"</span>)</span><br><span class="line">    print(listToString(myMap(plusOne, exampleList)), <span class="string">"should be 2 3 4 5"</span>)</span><br><span class="line">    print(myReduce(xTimesTwoPlusY, <span class="number">0</span>, exampleList), <span class="string">"should be 26"</span>)</span><br><span class="line">    print(myReduce(unfoldCalculation, <span class="string">"accm"</span>, exampleList), <span class="string">"should be fn(fn(fn(fn(accm, 1), 2), 3), 4)"</span>)</span><br><span class="line">    print(myReduceRight(xTimesTwoPlusY, <span class="number">0</span>, exampleList), <span class="string">"should be 20"</span>)</span><br><span class="line">    print(myReduceRight(unfoldCalculation, <span class="string">"accm"</span>, exampleList), <span class="string">"should be fn(1, fn(2, fn(3, fn(4, accm))))"</span>)</span><br><span class="line">    print(<span class="string">"Below should output 4 3 2 1 each on a separate line:"</span>);</span><br><span class="line">    myReduceRight(printXAndReturnY, <span class="number">0</span>, exampleList)</span><br><span class="line">    print(listToString(myMap2(plusOne, exampleList)), <span class="string">"should be 2 3 4 5"</span>)</span><br><span class="line">    print(<span class="string">"The two outputs below should be equal:"</span>)</span><br><span class="line">    print(<span class="string">"First output:"</span>)</span><br><span class="line">    myMap(printAndReturn, exampleList)</span><br><span class="line">    print(<span class="string">"Second output:"</span>)</span><br><span class="line">    myMap2(printAndReturn, exampleList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><hr><h3 id="最终实现："><a href="#最终实现：" class="headerlink" title="最终实现："></a>最终实现：</h3><h4 id="JavaScript实现："><a href="#JavaScript实现：" class="headerlink" title="JavaScript实现："></a>JavaScript实现：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Refer to README for detailed instructions.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cons</span>(<span class="params">head, tail</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    head: head,</span><br><span class="line">    tail: tail,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToString</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!list) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!list.tail) &#123;</span><br><span class="line">    <span class="keyword">return</span> list.head.toString();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list.head.toString() + <span class="string">' '</span> + listToString(list.tail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMap</span>(<span class="params">fn, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!list) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cons(fn(list.head), myMap(fn, list.tail));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReduce</span>(<span class="params">fn, accm, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!list) &#123;</span><br><span class="line">    <span class="keyword">return</span> accm;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> myReduce(fn, fn(accm, list.head), list.tail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myReduceRight</span>(<span class="params">fn, accm, list</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// [BEGIN] YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">if</span> (!list) &#123;</span><br><span class="line">    <span class="keyword">return</span> accm;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// State-of-the-art trampoline trick to prevent recursion stack overflow</span></span><br><span class="line">  <span class="keyword">const</span> trampoline = <span class="function">(<span class="params">fun</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">trampolined</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result = fun(...args);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">typeof</span> result == <span class="string">'function'</span>) &#123;</span><br><span class="line">        result = result();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> reverseOperation = <span class="function">(<span class="params">origList</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reverseCons = <span class="function">(<span class="params">cons, acc = []</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!cons) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      acc.push(cons.head);</span><br><span class="line">      <span class="keyword">if</span> (cons.tail <span class="keyword">instanceof</span> <span class="built_in">Object</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> reverseCons(cons.tail, acc);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> acc.reverse();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> recursCons = <span class="function">(<span class="params">jsList = []</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (jsList.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          head: jsList[<span class="number">0</span>],</span><br><span class="line">          tail: recursCons(jsList.slice(<span class="number">1</span>)),</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IMMUTABLE</span></span><br><span class="line">    <span class="keyword">const</span> newList = <span class="built_in">Object</span>.assign(&#123;&#125;, origList);</span><br><span class="line">    <span class="comment">//   Get the reversed version of Linklist in another plain representation</span></span><br><span class="line">    <span class="keyword">const</span> reversedJSList = trampoline(reverseCons)(newList, []);</span><br><span class="line">    <span class="comment">// Back assign the reversed plain representation to Linklist</span></span><br><span class="line">    <span class="keyword">const</span> reversedLinkList = trampoline(recursCons)(reversedJSList);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reversedLinkList;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> innerReducer = <span class="function">(<span class="params">fn_, accm_, list_</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!list_) &#123;</span><br><span class="line">      <span class="keyword">return</span> accm_;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerReducer(fn_, fn_(list_.head, accm_), list_.tail);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> trampoline(innerReducer)(fn, accm, reverseOperation(list));</span><br><span class="line">  <span class="comment">// [END] YOUR CODE HERE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myMap2</span>(<span class="params">fn, list</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// [BEGIN] YOUR CODE HERE</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// State-of-the-art trampoline trick to prevent recursion stack overflow</span></span><br><span class="line">  <span class="keyword">const</span> trampoline = <span class="function">(<span class="params">fun</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">trampolined</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result = fun(...args);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">typeof</span> result == <span class="string">'function'</span>) &#123;</span><br><span class="line">        result = result();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> polishedFn = <span class="function">(<span class="params">cur, acc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newAcc = &#123;&#125;;</span><br><span class="line">    newAcc.tail = <span class="built_in">Object</span>.keys(acc).length &gt; <span class="number">0</span> ? acc : <span class="literal">undefined</span>;</span><br><span class="line">    newAcc.head = <span class="function"><span class="params">()</span> =&gt;</span> fn(cur); <span class="comment">// delay to keep the map order</span></span><br><span class="line">    <span class="keyword">return</span> newAcc;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> newList = <span class="built_in">Object</span>.assign(list);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> storeList = myReduceRight(polishedFn, &#123;&#125;, newList);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> activateStore = <span class="function">(<span class="params">store</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!store) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    store.head = store.head <span class="keyword">instanceof</span> <span class="built_in">Function</span> ? store.head() : store.head;</span><br><span class="line">    store.tail = activateStore(store.tail);</span><br><span class="line">    <span class="keyword">return</span> store;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> trampoline(activateStore)(storeList);</span><br><span class="line">  <span class="comment">// [END] YOUR CODE HERE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> exampleList = cons(<span class="number">1</span>, cons(<span class="number">2</span>, cons(<span class="number">3</span>, cons(<span class="number">4</span>))));</span><br><span class="line">  <span class="keyword">let</span> plusOne = <span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> xTimesTwoPlusY = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * <span class="number">2</span> + y;</span><br><span class="line">  <span class="keyword">let</span> printXAndReturnY = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> unfoldCalculation = <span class="function">(<span class="params">x, y</span>) =&gt;</span> <span class="string">'fn('</span> + x + <span class="string">', '</span> + y + <span class="string">')'</span>;</span><br><span class="line">  <span class="keyword">let</span> printAndReturn = <span class="built_in">console</span>.log;</span><br><span class="line">  <span class="built_in">console</span>.log(listToString(exampleList), <span class="string">'should be 1 2 3 4'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(listToString(myMap(plusOne, exampleList)), <span class="string">'should be 2 3 4 5'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(myReduce(xTimesTwoPlusY, <span class="number">0</span>, exampleList), <span class="string">'should be 26'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    myReduce(unfoldCalculation, <span class="string">'accm'</span>, exampleList),</span><br><span class="line">    <span class="string">'should be fn(fn(fn(fn(accm, 1), 2), 3), 4)'</span></span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">console</span>.log(myReduceRight(xTimesTwoPlusY, <span class="number">0</span>, exampleList), <span class="string">'should be 20'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    myReduceRight(unfoldCalculation, <span class="string">'accm'</span>, exampleList),</span><br><span class="line">    <span class="string">'should be fn(1, fn(2, fn(3, fn(4, accm))))'</span></span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Below should output 4 3 2 1 each on a separate line:'</span>);</span><br><span class="line">  myReduceRight(printXAndReturnY, <span class="number">0</span>, exampleList);</span><br><span class="line">  <span class="built_in">console</span>.log(listToString(myMap2(plusOne, exampleList)), <span class="string">'should be 2 3 4 5'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'The two outputs below should be equal:'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'First output:'</span>);</span><br><span class="line">  myMap(printAndReturn, exampleList);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Second output:'</span>);</span><br><span class="line">  myMap2(printAndReturn, exampleList);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main();</span><br></pre></td></tr></table></figure><blockquote><p>诀窍：使用蹦床函数trampoline优化递归调用。</p></blockquote><h4 id="打印结果："><a href="#打印结果：" class="headerlink" title="打印结果："></a>打印结果：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">'1 2 3 4' 'should be 1 2 3 4'</span><br><span class="line">'2 3 4 5' 'should be 2 3 4 5'</span><br><span class="line">26 'should be 26'</span><br><span class="line">'fn(fn(fn(fn(accm, 1), 2), 3), 4)' 'should be fn(fn(fn(fn(accm, 1), 2), 3), 4)'</span><br><span class="line">20 'should be 20'</span><br><span class="line">'fn(1, fn(2, fn(3, fn(4, accm))))' 'should be fn(1, fn(2, fn(3, fn(4, accm))))'</span><br><span class="line">'Below should output 4 3 2 1 each on a separate line:'</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">'2 3 4 5' 'should be 2 3 4 5'</span><br><span class="line">'The two outputs below should be equal:'</span><br><span class="line">'First output:'</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">'Second output:'</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><hr><h4 id="Python实现："><a href="#Python实现：" class="headerlink" title="Python实现："></a>Python实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Refer to README for detailed instructions.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, head, tail)</span>:</span></span><br><span class="line">        self.head = head</span><br><span class="line">        self.tail = tail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cons</span><span class="params">(head, tail=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> LinkedList(head, tail)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listToString</span><span class="params">(list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> list <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> list.tail <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> str(list.head)</span><br><span class="line">    <span class="keyword">return</span> str(list.head) + <span class="string">" "</span> + listToString(list.tail)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMap</span><span class="params">(fn, list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> list <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> cons(fn(list.head), myMap(fn, list.tail))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myReduce</span><span class="params">(fn, accm, list)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> list <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> accm</span><br><span class="line">    <span class="keyword">return</span> myReduce(fn, fn(accm, list.head), list.tail)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myReduceRight</span><span class="params">(fn, accm, list)</span>:</span></span><br><span class="line">    <span class="comment"># [BEGIN] YOUR CODE HERE</span></span><br><span class="line">    <span class="keyword">if</span> list <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="keyword">return</span> accm</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseOperation</span><span class="params">(origList)</span>:</span></span><br><span class="line">        <span class="comment"># Get the reversed version of Linklist in another plain representation</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">reverseCons</span><span class="params">(cons, acc = [])</span>:</span></span><br><span class="line">            <span class="keyword">if</span> cons <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            acc.append(cons.head)</span><br><span class="line">            <span class="keyword">if</span> cons.tail != <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> reverseCons(cons.tail, acc)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> acc[::<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># Back assign the reversed plain representation to Linklist</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">recursCons</span><span class="params">(pyList = [])</span>:</span></span><br><span class="line">            <span class="keyword">if</span> len(pyList) &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> cons(pyList[<span class="number">0</span>], recursCons(pyList[<span class="number">1</span>:]))</span><br><span class="line"></span><br><span class="line">        newList = copy.deepcopy(origList)</span><br><span class="line">        reversedPyList = reverseCons(newList, []);</span><br><span class="line">        reversedLinkList = recursCons(reversedPyList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reversedLinkList</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">innerReducer</span><span class="params">(fn_, accm_, list_)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> list_ <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> accm_</span><br><span class="line">        <span class="keyword">return</span> innerReducer(fn_, fn_(list_.head, accm_), list_.tail)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> innerReducer(fn, accm, reverseOperation(list));</span><br><span class="line">    <span class="comment"># [END] YOUR CODE HERE</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myMap2</span><span class="params">(fn, list)</span>:</span></span><br><span class="line">    <span class="comment"># [BEGIN] YOUR CODE HERE</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">polishedFn</span><span class="params">(cur, acc)</span>:</span></span><br><span class="line">        newAcc = cons(<span class="keyword">None</span>)</span><br><span class="line">        newAcc.tail = acc <span class="keyword">if</span> isinstance(acc, LinkedList) <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">        newAcc.head = <span class="keyword">lambda</span>: fn(cur) <span class="comment"># delay to keep the map order</span></span><br><span class="line">        <span class="keyword">return</span> newAcc</span><br><span class="line"></span><br><span class="line">    newList = copy.deepcopy(list)</span><br><span class="line"></span><br><span class="line">    storeList = myReduceRight(polishedFn, &#123;&#125;, newList);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">activateStore</span><span class="params">(store)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> store <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        store.head = store.head() <span class="keyword">if</span> isinstance(store.head, types.FunctionType) <span class="keyword">else</span> store.head</span><br><span class="line">        store.tail = activateStore(store.tail)</span><br><span class="line">        <span class="keyword">return</span> store</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> activateStore(storeList)</span><br><span class="line">    <span class="comment"># [END] YOUR CODE HERE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    exampleList = cons(<span class="number">1</span>, cons(<span class="number">2</span>, cons(<span class="number">3</span>, cons(<span class="number">4</span>))))</span><br><span class="line">    plusOne = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line">    xTimesTwoPlusY = <span class="keyword">lambda</span> x, y: x * <span class="number">2</span> + y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printXAndReturnY</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unfoldCalculation</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fn(%s, %s)"</span> % (str(x), str(y))</span><br><span class="line">    printAndReturn = <span class="keyword">print</span></span><br><span class="line">    print(listToString(exampleList), <span class="string">"should be 1 2 3 4"</span>)</span><br><span class="line">    print(listToString(myMap(plusOne, exampleList)), <span class="string">"should be 2 3 4 5"</span>)</span><br><span class="line">    print(myReduce(xTimesTwoPlusY, <span class="number">0</span>, exampleList), <span class="string">"should be 26"</span>)</span><br><span class="line">    print(myReduce(unfoldCalculation, <span class="string">"accm"</span>, exampleList), <span class="string">"should be fn(fn(fn(fn(accm, 1), 2), 3), 4)"</span>)</span><br><span class="line">    print(myReduceRight(xTimesTwoPlusY, <span class="number">0</span>, exampleList), <span class="string">"should be 20"</span>)</span><br><span class="line">    print(myReduceRight(unfoldCalculation, <span class="string">"accm"</span>, exampleList), <span class="string">"should be fn(1, fn(2, fn(3, fn(4, accm))))"</span>)</span><br><span class="line">    print(<span class="string">"Below should output 4 3 2 1 each on a separate line:"</span>);</span><br><span class="line">    myReduceRight(printXAndReturnY, <span class="number">0</span>, exampleList)</span><br><span class="line">    print(listToString(myMap2(plusOne, exampleList)), <span class="string">"should be 2 3 4 5"</span>)</span><br><span class="line">    print(<span class="string">"The two outputs below should be equal:"</span>)</span><br><span class="line">    print(<span class="string">"First output:"</span>)</span><br><span class="line">    myMap(printAndReturn, exampleList)</span><br><span class="line">    print(<span class="string">"Second output:"</span>)</span><br><span class="line">    myMap2(printAndReturn, exampleList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><blockquote><p>备注：Python的trampoline蹦床函数实现有些复杂，直接递归处理了。可参考文章<a href="[Tail recursion in Python, part 1: trampolines - Andrzej Pragacz](http://andrzej.pragacz.pl/blog/2018/09/python-tail-recursion-part-1-trampolines/">Tail recursion in Python, part 1: trampolines</a>)。</p></blockquote><h4 id="打印结果：-1"><a href="#打印结果：-1" class="headerlink" title="打印结果："></a>打印结果：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 should be 1 2 3 4</span><br><span class="line">2 3 4 5 should be 2 3 4 5</span><br><span class="line">26 should be 26</span><br><span class="line">fn(fn(fn(fn(accm, 1), 2), 3), 4) should be fn(fn(fn(fn(accm, 1), 2), 3), 4)</span><br><span class="line">20 should be 20</span><br><span class="line">fn(1, fn(2, fn(3, fn(4, accm)))) should be fn(1, fn(2, fn(3, fn(4, accm))))</span><br><span class="line">Below should output 4 3 2 1 each on a separate line:</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">2 3 4 5 should be 2 3 4 5</span><br><span class="line">The two outputs below should be equal:</span><br><span class="line">First output:</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">Second output:</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/293/538/2935380546-63f8eed3960bf_fix732" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;我们从一个链表的构造函数开始，“cons”，它接收一个必要参数“head”及一个可选参数“tail”（相对于支持这样的实现的语言来说）。该构造函数返回一个链表的表示结构体，其中第一个元素为“head”，其余的元素被包裹在“tail“链表中。空链表的话用JavaScript中的undefined或Python中的None来表示。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://lesliewong.cn/categories/JavaScript/"/>
    
      <category term="Python" scheme="http://lesliewong.cn/categories/JavaScript/Python/"/>
    
      <category term="算法" scheme="http://lesliewong.cn/categories/JavaScript/Python/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://lesliewong.cn/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lesliewong.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Python" scheme="http://lesliewong.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript专项算法题（7）：Iterators迭代器</title>
    <link href="http://lesliewong.cn/2022/05/07/JavaScript-functional-algorithms-iterators/"/>
    <id>http://lesliewong.cn/2022/05/07/JavaScript-functional-algorithms-iterators/</id>
    <published>2022-05-07T15:07:30.000Z</published>
    <updated>2024-01-18T05:04:26.006Z</updated>
    
    <content type="html"><![CDATA[<p>＠冒泡的马树</p><p>题库原地址：<a href="http://csbin.io/iterators" target="_blank" rel="noopener">http://csbin.io/iterators</a></p><h2 id="Iterators迭代器"><a href="#Iterators迭代器" class="headerlink" title="Iterators迭代器"></a>Iterators迭代器</h2><a id="more"></a><h3 id="挑战1"><a href="#挑战1" class="headerlink" title="挑战1"></a>挑战1</h3><p><strong>问题：</strong></p><p>A) 创建一个for循环，用于遍历数组，返回数组的所有元素的总和。</p><p>B) 创建一个函数式迭代器，调用时遍历传入的数组的每一个元素，每次一个元素。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHALLENGE 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumFunc</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sum += arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the lines below to test your work</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(sumFunc(array)); <span class="comment">// -&gt; should log 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnIterator</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> inner = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> element = arr[i]</span><br><span class="line">    i++</span><br><span class="line">    <span class="keyword">return</span> element</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the lines below to test your work</span></span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">const</span> myIterator = returnIterator(array2);</span><br><span class="line"><span class="built_in">console</span>.log(myIterator()); <span class="comment">// -&gt; should log 'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(myIterator()); <span class="comment">// -&gt; should log 'b'</span></span><br><span class="line"><span class="built_in">console</span>.log(myIterator()); <span class="comment">// -&gt; should log 'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(myIterator()); <span class="comment">// -&gt; should log 'd'</span></span><br></pre></td></tr></table></figure><h3 id="挑战2"><a href="#挑战2" class="headerlink" title="挑战2"></a>挑战2</h3><p><strong>问题：</strong></p><p>创建一个附有next方法的迭代器。当.next被调用时，此迭代器会逐个返回数组内的元素。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHALLENGE 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextIterator</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> inner = &#123;</span><br><span class="line">    next: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> element = arr[i]</span><br><span class="line">      i++</span><br><span class="line">      <span class="keyword">return</span> element</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the lines below to test your work</span></span><br><span class="line"><span class="keyword">const</span> array3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> iteratorWithNext = nextIterator(array3);</span><br><span class="line"><span class="built_in">console</span>.log(iteratorWithNext.next()); <span class="comment">// -&gt; should log 1</span></span><br><span class="line"><span class="built_in">console</span>.log(iteratorWithNext.next()); <span class="comment">// -&gt; should log 2</span></span><br><span class="line"><span class="built_in">console</span>.log(iteratorWithNext.next()); <span class="comment">// -&gt; should log 3</span></span><br></pre></td></tr></table></figure><h3 id="挑战3"><a href="#挑战3" class="headerlink" title="挑战3"></a>挑战3</h3><p><strong>问题：</strong></p><p>编写代码，使用上方的nextIterator函数遍历一整个数组，然后求和。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHALLENGE 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="comment">// use your nextIterator function</span></span><br><span class="line">  <span class="keyword">const</span> iteratorWithNext = nextIterator(arr)</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> item </span><br><span class="line">  <span class="keyword">while</span>(item = iteratorWithNext.next()) &#123;</span><br><span class="line">    sum += item</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the lines below to test your work</span></span><br><span class="line"><span class="keyword">const</span> array4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(sumArray(array4)); <span class="comment">// -&gt; should log 10</span></span><br></pre></td></tr></table></figure><h3 id="挑战4"><a href="#挑战4" class="headerlink" title="挑战4"></a>挑战4</h3><p><strong>问题：</strong></p><p>创建一个附有next方法的迭代器。当调用.next时，它会返回传入的set集合的每一个元素。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHALLENGE 4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setIterator</span>(<span class="params">set</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="comment">// Solution One:</span></span><br><span class="line">  <span class="comment">// let i = 0</span></span><br><span class="line">  <span class="comment">// const arr = [...set]</span></span><br><span class="line">  <span class="comment">// return &#123;</span></span><br><span class="line">  <span class="comment">//   next: () =&gt; arr[i++]</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// Solution Two:</span></span><br><span class="line">  <span class="keyword">const</span> newSet = set[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">next</span>: <span class="function"><span class="params">()</span> =&gt;</span> newSet.next().value&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the lines below to test your work</span></span><br><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="built_in">Set</span>(<span class="string">'hey'</span>);</span><br><span class="line"><span class="keyword">const</span> iterateSet = setIterator(mySet);</span><br><span class="line"><span class="built_in">console</span>.log(iterateSet.next()); <span class="comment">// -&gt; should log 'h'</span></span><br><span class="line"><span class="built_in">console</span>.log(iterateSet.next()); <span class="comment">// -&gt; should log 'e'</span></span><br><span class="line"><span class="built_in">console</span>.log(iterateSet.next()); <span class="comment">// -&gt; should log 'y'</span></span><br></pre></td></tr></table></figure><h3 id="挑战5"><a href="#挑战5" class="headerlink" title="挑战5"></a>挑战5</h3><p><strong>问题：</strong></p><p>创建一个附有next方法的迭代器。当调用.next时，它会返回带有两个元素的数组（第一个为下标，第二个为下标对应的数组元素）。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHALLENGE 5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexIterator</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> element = arr[i]</span><br><span class="line">      <span class="keyword">const</span> index = i</span><br><span class="line">      i++</span><br><span class="line">      <span class="keyword">return</span> [index, element]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the lines below to test your work</span></span><br><span class="line"><span class="keyword">const</span> array5 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">const</span> iteratorWithIndex = indexIterator(array5);</span><br><span class="line"><span class="built_in">console</span>.log(iteratorWithIndex.next()); <span class="comment">// -&gt; should log [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(iteratorWithIndex.next()); <span class="comment">// -&gt; should log [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(iteratorWithIndex.next()); <span class="comment">// -&gt; should log [2, 'c']</span></span><br></pre></td></tr></table></figure><h3 id="挑战6"><a href="#挑战6" class="headerlink" title="挑战6"></a>挑战6</h3><p><strong>问题：</strong></p><p>创建一个迭代器。在它的.next方法被调用时，它会返回一个句子型字符串中的每一个单词。</p><p>（提示：使用正则表达式！）</p><p>然后将此操作当成一个方法挂载到构建函数Words的原型链上。</p><p>（提示：研究Symbol.iterator！）</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHALLENGE 6</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Words</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.str = string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Words.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// YOUR CODE HERE</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/\w+/g</span></span><br><span class="line">  <span class="keyword">const</span> strArr = <span class="keyword">this</span>.str.match(reg)</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="params">()</span> =&gt;</span> </span><br><span class="line">      (index &lt; strArr.length) ? </span><br><span class="line">        &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: strArr[index++] &#125; :</span><br><span class="line">        &#123; <span class="attr">done</span>: <span class="literal">true</span>, <span class="attr">value</span>: <span class="literal">undefined</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the lines below to test your work</span></span><br><span class="line"><span class="keyword">const</span> helloWorld = <span class="keyword">new</span> Words(<span class="string">'Hello World'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> word <span class="keyword">of</span> helloWorld) &#123; <span class="built_in">console</span>.log(word); &#125; <span class="comment">// -&gt; should log 'Hello' and 'World'</span></span><br></pre></td></tr></table></figure><h3 id="挑战7"><a href="#挑战7" class="headerlink" title="挑战7"></a>挑战7</h3><p><strong>问题：</strong></p><p>创建一个函数。此函数会遍历传入的数组，返回对应的遍历元素和字符串“was found after index x”拼接而成的字符串结果，其中的x是前一个下标。</p><p>注意：对于第一个元素，它应该返回“It is the first”。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CHALLENGE 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">valueAndPrevIndex</span>(<span class="params">array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> iteratedArray = array[<span class="built_in">Symbol</span>.iterator]()</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    sentence: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">        iteratedArray.next()</span><br><span class="line">        index++</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`It is the first`</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="string">`<span class="subst">$&#123;iteratedArray.next().value&#125;</span> was found after index <span class="subst">$&#123;index - <span class="number">1</span>&#125;</span>`</span></span><br><span class="line">        index++</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> returnedSentence = valueAndPrevIndex([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">console</span>.log(returnedSentence.sentence());</span><br><span class="line"><span class="built_in">console</span>.log(returnedSentence.sentence());</span><br><span class="line"><span class="built_in">console</span>.log(returnedSentence.sentence());</span><br></pre></td></tr></table></figure><h3 id="挑战8"><a href="#挑战8" class="headerlink" title="挑战8"></a>挑战8</h3><p><strong>问题：</strong></p><p>编写一个函数。它会每三秒钟console.log打印“hello there”或“gibberish”，取决于传入函数的值是否为“english”。</p><p>请勿使用任何形式的循环且请仅调用createConversation一次。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CHALLENGE 8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">createConversation</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> output = <span class="string">''</span></span><br><span class="line">  <span class="keyword">if</span> (string === <span class="string">'english'</span>) &#123;</span><br><span class="line">    output = <span class="string">'hello there'</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    output = <span class="string">'gibberish'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(output)&#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createConversation(<span class="string">'english'</span>).next();</span><br></pre></td></tr></table></figure><h3 id="挑战9"><a href="#挑战9" class="headerlink" title="挑战9"></a>挑战9</h3><p><strong>问题：</strong></p><p>使用async/await来console.log打印一个由名词noun和动词verb构成的句子，其中非异步函数会接收一个名词noun，与一个硬编码的动词verb拼接，在三秒后返回给异步函数。异步函数接收到数据后，会console.log打印相应数据。异步函数仅能调用一次，传入一个名词noun见证它的执行吧！</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CHALLENGE 9</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waitForVerb</span>(<span class="params">noun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> verb = <span class="string">'barks'</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">`<span class="subst">$&#123;noun&#125;</span> <span class="subst">$&#123;verb&#125;</span>`</span>), <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">noun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sentence = <span class="keyword">await</span> waitForVerb(noun)</span><br><span class="line">  <span class="built_in">console</span>.log(sentence)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="string">"dog"</span>)</span><br></pre></td></tr></table></figure><hr><p><img src="https://image-static.segmentfault.com/334/749/3347494114-6ef1cdb20ecb25b7_fix732" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;＠冒泡的马树&lt;/p&gt;
&lt;p&gt;题库原地址：&lt;a href=&quot;http://csbin.io/iterators&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://csbin.io/iterators&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Iterators迭代器&quot;&gt;&lt;a href=&quot;#Iterators迭代器&quot; class=&quot;headerlink&quot; title=&quot;Iterators迭代器&quot;&gt;&lt;/a&gt;Iterators迭代器&lt;/h2&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://lesliewong.cn/categories/JavaScript/"/>
    
      <category term="算法" scheme="http://lesliewong.cn/categories/JavaScript/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://lesliewong.cn/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lesliewong.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript专项算法题（6）：Promises</title>
    <link href="http://lesliewong.cn/2022/05/06/JavaScript-functional-algorithms-promises/"/>
    <id>http://lesliewong.cn/2022/05/06/JavaScript-functional-algorithms-promises/</id>
    <published>2022-05-06T10:07:30.000Z</published>
    <updated>2024-01-18T05:03:33.353Z</updated>
    
    <content type="html"><![CDATA[<p>＠冒泡的马树</p><p>题库原地址：<a href="http://csbin.io/promises" target="_blank" rel="noopener">http://csbin.io/promises</a></p><h2 id="Promises期约"><a href="#Promises期约" class="headerlink" title="Promises期约"></a>Promises期约</h2><a id="more"></a><h3 id="挑战1"><a href="#挑战1" class="headerlink" title="挑战1"></a>挑战1</h3><p><strong>问题：</strong></p><p>让我们从复习异步函数开始吧！使用setTimeout，在1000ms后打印字符串“Hello!”。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Challenge 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ADD CODE HERE</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Hello!'</span>), <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the line below when ready</span></span><br><span class="line">sayHello(); <span class="comment">// should log "Hello" after 1000ms</span></span><br></pre></td></tr></table></figure><h3 id="挑战2"><a href="#挑战2" class="headerlink" title="挑战2"></a>挑战2</h3><p><strong>问题：</strong></p><p>创建一个promise。延迟1000ms后在resolve里面传入值“Resolved!”，使用setTimeout。在promise被调用resolve后，打印它的内容，借助传入console.log到.then中来实现。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Challenge 2</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ADD CODE HERE</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="string">'Resolved'</span>), <span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should print out "Resolved!"</span></span><br><span class="line"><span class="comment">// ADD CODE HERE</span></span><br><span class="line">promise.then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><h3 id="挑战3"><a href="#挑战3" class="headerlink" title="挑战3"></a>挑战3</h3><p><strong>问题：</strong></p><p>创建另外一个promise。这次不使用setTimeout，在reject里面传入值“Rejected!”。在promise被调用reject之后，打印它的内容，借助传入console.log到.catch来实现。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Challenge 3</span></span><br><span class="line"></span><br><span class="line">promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ADD CODE HERE</span></span><br><span class="line">  reject(<span class="string">'Rejected'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should print out "Reject!"</span></span><br><span class="line"><span class="comment">// ADD CODE HERE</span></span><br><span class="line">promise.catch(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><h3 id="挑战4"><a href="#挑战4" class="headerlink" title="挑战4"></a>挑战4</h3><p><strong>问题：</strong></p><p>Promises期约是异步的。现在让我们来证明它们确实如此！创建一个promise，在resolve里面传入值“Promise has been resolved!”，然后去掉挑战4底部的注释。运行后我们看到的打印顺序是怎样的？“Promise has been resolved!”先还是”I’m not the promise!”先？为什么？</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Challenge 4</span></span><br><span class="line"></span><br><span class="line">promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ADD CODE HERE</span></span><br><span class="line">  resolve()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the lines below when ready</span></span><br><span class="line">promise.then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Promise has been resolved!'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"I'm not the promise!"</span>);</span><br></pre></td></tr></table></figure><h3 id="挑战5"><a href="#挑战5" class="headerlink" title="挑战5"></a>挑战5</h3><p><strong>问题：</strong></p><p>编写delay函数，用于返回一个promise。此返回promise应该返回一个在1000ms后调用resolve的setTimeout。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Challenge 5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> setTimeout(resolve, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uncomment the code below to test</span></span><br><span class="line"><span class="comment">// This code should log "Hello" after 1000ms</span></span><br><span class="line">delay().then(sayHello);</span><br></pre></td></tr></table></figure><h3 id="挑战6"><a href="#挑战6" class="headerlink" title="挑战6"></a>挑战6</h3><p><strong>问题：</strong></p><p>在这个挑战中我们会使用.then链式调用promises期约。创建两个变量：firstPromise和secondPromise，让secondPromise成为一个在resolve中传值“Second!”的promise，firstPromise则在resolve中传入secondPromise。用.then的方式调用firstPromise，这会返回secondPromise，然后在它的resolve执行之后，打印对应promise的内容，借助传入console.log到.then来实现。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Challenge 6</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ADD CODE BELOW</span></span><br><span class="line"><span class="keyword">var</span> secondPromise = <span class="built_in">Promise</span>.resolve(<span class="string">'Second!'</span>)</span><br><span class="line"><span class="keyword">var</span> firstPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(secondPromise)</span><br><span class="line">&#125;)</span><br><span class="line">firstPromise.then().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><h3 id="挑战7"><a href="#挑战7" class="headerlink" title="挑战7"></a>挑战7</h3><p><strong>问题：</strong></p><p>我们有一个会从数据库拉取数据的API，它接收一个下标参数然后返回一个promise。你的挑战是使用promise.all发起3次API调用，然后在调用都结束后返回对应的数据。</p><p><strong>题解：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Challenge 7</span></span><br><span class="line"><span class="keyword">const</span> fakePeople = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Rudolph'</span>, <span class="attr">hasPets</span>: <span class="literal">false</span>, <span class="attr">currentTemp</span>: <span class="number">98.6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Zebulon'</span>, <span class="attr">hasPets</span>: <span class="literal">true</span>, <span class="attr">currentTemp</span>: <span class="number">22.6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'Harold'</span>, <span class="attr">hasPets</span>: <span class="literal">true</span>, <span class="attr">currentTemp</span>: <span class="number">98.3</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fakeAPICall = <span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> returnTime = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; fakePeople.length) &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(fakePeople[i]), returnTime);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      reject(&#123; <span class="attr">message</span>: <span class="string">"index out of range"</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// CODE GOES HERE</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([fakeAPICall(<span class="number">0</span>), fakeAPICall(<span class="number">1</span>), fakeAPICall(<span class="number">2</span>)])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getAllData().then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure><hr><p><img src="https://image-static.segmentfault.com/380/520/380520036-b9807778b481c012_fix732" alt="35kingCrab"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;＠冒泡的马树&lt;/p&gt;
&lt;p&gt;题库原地址：&lt;a href=&quot;http://csbin.io/promises&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://csbin.io/promises&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Promises期约&quot;&gt;&lt;a href=&quot;#Promises期约&quot; class=&quot;headerlink&quot; title=&quot;Promises期约&quot;&gt;&lt;/a&gt;Promises期约&lt;/h2&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://lesliewong.cn/categories/JavaScript/"/>
    
      <category term="算法" scheme="http://lesliewong.cn/categories/JavaScript/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="JavaScript" scheme="http://lesliewong.cn/tags/JavaScript/"/>
    
      <category term="算法" scheme="http://lesliewong.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>谷歌高速公路招聘广告：{ 无理数e中前十位连续的素数 }.com</title>
    <link href="http://lesliewong.cn/2022/01/15/google-highway-advertisement-first-10-digit-prime-found-in-consecutive-digits-of-e/"/>
    <id>http://lesliewong.cn/2022/01/15/google-highway-advertisement-first-10-digit-prime-found-in-consecutive-digits-of-e/</id>
    <published>2022-01-15T15:45:30.000Z</published>
    <updated>2024-01-18T05:01:59.269Z</updated>
    
    <content type="html"><![CDATA[<p>偶然间，看到吴军老师的《浪潮之巅（第四版）》里有讲到这么一个故事。</p><blockquote><p>Google曾经在加州的101高速公路上用大广告牌登了这样的广告：</p><p><strong>{ 无理数e中前十位连续的素数 }.com</strong></p><p>你如果知道这个答案（7427466391.com），就可以通过上述网址进入到Google的招聘网站。而能够计算出这道题，要很聪明。</p></blockquote><p>“很聪明”？吴军老师的这句话倒是让人来兴趣了，自己也凑性借助计算机的力量琢磨琢磨下这个证明题。</p><a id="more"></a> <p><img src="https://image-static.segmentfault.com/201/978/2019783571-ba14000c750f6f46_fix732" alt="What Google&#39;s Genius Billboard From 2004 Can Teach Us About Solving Problems"></p><hr><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>大家都知道，ｅ是无理数，换言之，无限不循环小数。世间总有些数学爱好人士乐此不疲地用计算机来推算这些无理数的小数位，π如此，ｅ更不例外。所以，</p><h5 id="第一步，在一些权威的数学网站上找到e的小数位数据；"><a href="#第一步，在一些权威的数学网站上找到e的小数位数据；" class="headerlink" title="第一步，在一些权威的数学网站上找到ｅ的小数位数据；"></a><strong><em>第一步，在一些权威的数学网站上找到ｅ的小数位数据；</em></strong></h5><p>这时候，就是谷歌大法好了，来到了ｅ的<a href="https://en.wikipedia.org/wiki/E_(mathematical_constant" target="_blank" rel="noopener">维基英文百科</a>页面，留意到了下面ｅ的小数表达形式后面的“A001113”超链接，有蹊跷，便点进去看下。</p><p><img src="https://image-static.segmentfault.com/282/534/282534849-4585de2db7e5bba4_fix732" alt="image-20220111002852190"></p><p>接着便是这个OEIS站点的<a href="https://oeis.org/A001113" target="_blank" rel="noopener">A001113页面</a>了，原来是数论方面的一个很权威的数据库网站。</p><p><img src="https://image-static.segmentfault.com/153/736/1537361166-ffd45c63194322da_fix732" alt="image-20220111003231427"></p><p>带着探宝的眼光在这个网页上下左右扫视，总算发现了目标。LINKS（链接）的第一个条目便是了。</p><p>N. J. A. Sloane, Table of 50000 digits of e labeled from 1 to 50000 [based on the ICON Project link below]</p><p>作者也是创办了这个OEIS组织的N.J.A Sloane，看来是个此领域的大人物了，抱歉有眼不识泰山。</p><p><img src="https://image-static.segmentfault.com/197/894/1978947173-a29e2c3fa3e8800e_fix732" alt="image-20220111004139733"></p><p>点进去这个<a href="https://oeis.org/A001113/b001113.txt" target="_blank" rel="noopener">Table of 50000 digits of e labeled from 1 to 50000</a>，页面结果让人很愉悦。直接的纯文本数据，左列为小数位数，右列为对应数值。到时候拿到数据时简单处理下即可展开后续工作，希望这道证明题的答案就在这50000个数中，不然得扩大范围了。</p><p><img src="https://image-static.segmentfault.com/396/101/3961014588-a185fc56f73cef75_fix732" alt="image-20220111004824130"></p><p>到此，e无理数的小数位数据有了，便可以展开下一步工作了。</p><h5 id="第二步，如何判断一个数是素数？"><a href="#第二步，如何判断一个数是素数？" class="headerlink" title="第二步，如何判断一个数是素数？"></a><strong><em>第二步，如何判断一个数是素数？</em></strong></h5><p>上小学的时候开始，数学老师就教导我们，素数的定义是指一个除了1和该数自身外，无法被其他自然数整除的大于1的自然数。所以自然，判断思路便是对一个大于1的自然数n，依次判断2 → n能否整除n，如果发现一个数能整除n，那么n不是素数，否则是。另外，考虑到对称性，我们也不必一直递增到n，如对于2*3和3*2，6/2和6/3皆判定6为合数，但是递增到2时就已经是充分了， 故不必再考虑3。</p><p>Python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(n: int)</span> -&gt; bool:</span></span><br><span class="line">  <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">  i = <span class="number">2</span></span><br><span class="line">  <span class="comment"># Make use of symmetry. For example, 2*3=6, 3*2=6</span></span><br><span class="line">  <span class="keyword">while</span> i * i &lt; n:</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>在网上查阅素数相关的资料的时候，发现数论里有个素数分布规律也可以拿来判断素数。来源——<a href="https://blog.csdn.net/Frost_Bite/article/details/88878063" target="_blank" rel="noopener">素数判定算法</a></p><blockquote><p><strong>素数分布规律:</strong></p><p>当 n &gt;= 5 时，如果n为素数，那么 n % 6 = 1 || n % 6 = 5, 即 n 一定出现在 6x（x ≥ 1）两侧。换句话说，任意一个素数都可以被表示为 6x ± 1， x ∈ N 的形式。</p><p><strong>证明：</strong></p><p>把6x附近的数用以下方式表示：</p><p>……(6x - 1), 6x, 6x + 1, 2(3x + 1), 3(2x + 1), 2(3x + 2), 6x + 5, 6(x+1)……</p><p>不在6x两侧的数为：2(3x + 1), 3(2x + 1), 2(3x + 2), 它们不是素数，所以素数出现在6x的两侧。</p></blockquote><p>用Python代码实现如下，时间复杂度上比前一种相差无几，不过对于我们的证明来说，是够用了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(n: int)</span> -&gt; bool:</span></span><br><span class="line">  <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">  <span class="keyword">if</span> n &lt;= <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">  <span class="comment"># For case of 2(3x + 1), 3(2x + 1), 2(3x + 2)</span></span><br><span class="line">  <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">  <span class="comment"># For case of the multiplication of prime numbers</span></span><br><span class="line">  i = <span class="number">5</span></span><br><span class="line">  <span class="keyword">while</span> i * i &lt; n:</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span> <span class="keyword">or</span> n % (i + <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    i += <span class="number">6</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>此外，了解到密码学里面判定素数有很大的用处，比如著名的RSA算法。在判断素数算法方面，并没有采用上面的时间复杂度较高的简单取余算法，而是Fermat小定理、Miller-Rabin算法及Solovay-Strassen算法等，理解起来较为吃力，具体可参考下这篇文章——<a href="https://blog.csdn.net/O_1CxH/article/details/81627751" target="_blank" rel="noopener">PyCrypto密码学库源码解析（一）随机数和大素数生成</a>, 以及上面那篇。</p><p>至此，必要的材料都准备好了，可以进行最后一步了。</p><h5 id="第三步，for循环e的小数位数据判断第一个10位长的素数。"><a href="#第三步，for循环e的小数位数据判断第一个10位长的素数。" class="headerlink" title="第三步，for循环e的小数位数据判断第一个10位长的素数。"></a><em>第三步，for循环e的小数位数据判断第一个10位长的素数。</em></h5><p>开门见山，直接源码抛出来先。</p><p>具体思路：先使用requests库获取e小数位数据，然后转存为文件便于逐行读取，for循环逐行读取每一小数位数据，进行切片操作，整理成证明所需的10位整数，得到总数量为49991的有序列表，再借助素数判定函数逐个判定这些10位整数，最后得到答案——7427466391。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://oeis.org/A001113/b001113.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save sequence to a file for later use</span></span><br><span class="line">out_file = open(<span class="string">'digits_of_e.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">print(response.text, file=out_file)</span><br><span class="line"></span><br><span class="line">queue = []</span><br><span class="line"></span><br><span class="line">container = <span class="string">''</span></span><br><span class="line">counter = <span class="number">0</span>  </span><br><span class="line">in_file = open(<span class="string">'digits_of_e.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">list_in_file = list(in_file)</span><br><span class="line"><span class="keyword">for</span> index, line <span class="keyword">in</span> enumerate(list_in_file):</span><br><span class="line">  segments = list_in_file[index:index+<span class="number">10</span>]</span><br><span class="line">  <span class="comment"># get lines at a batch of 10 lines</span></span><br><span class="line">  <span class="keyword">for</span> segment <span class="keyword">in</span> segments:</span><br><span class="line">    matchObj = re.match(<span class="string">r'([\d]*) (\d).*'</span>, segment, re.I)</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> counter &lt;= <span class="number">10</span>:</span><br><span class="line">      container += matchObj.group(<span class="number">2</span>) <span class="keyword">if</span> matchObj != <span class="keyword">None</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      counter = <span class="number">1</span></span><br><span class="line">      <span class="keyword">if</span> len(container) == <span class="number">10</span>:</span><br><span class="line">        queue.append(container)</span><br><span class="line">      container = matchObj.group(<span class="number">2</span>) <span class="keyword">if</span> matchObj != <span class="keyword">None</span> <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">in_file.close()</span><br><span class="line"></span><br><span class="line">print(len(queue)) <span class="comment"># 49991 indeed</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(n: int)</span> -&gt; bool:</span></span><br><span class="line">  <span class="comment"># Prime number definition version:</span></span><br><span class="line">  <span class="string">'''</span></span><br><span class="line"><span class="string">  if n &lt;= 1:</span></span><br><span class="line"><span class="string">    return False</span></span><br><span class="line"><span class="string">  i = 2</span></span><br><span class="line"><span class="string">  # Make use of symmetry. For example, 2*3=6, 3*2=6</span></span><br><span class="line"><span class="string">  while i * i &lt; n:</span></span><br><span class="line"><span class="string">    if n % i == 0:</span></span><br><span class="line"><span class="string">      return False</span></span><br><span class="line"><span class="string">    i += 1</span></span><br><span class="line"><span class="string">  return True</span></span><br><span class="line"><span class="string">  '''</span></span><br><span class="line">  <span class="comment"># Distribution pattern of prime number version:</span></span><br><span class="line">  <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">  <span class="keyword">if</span> n &lt;= <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">  <span class="comment"># For case of 2(3x + 1), 3(2x + 1), 2(3x + 2)</span></span><br><span class="line">  <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">  <span class="comment"># For case of the multiplication of prime numbers</span></span><br><span class="line">  i = <span class="number">5</span></span><br><span class="line">  <span class="keyword">while</span> i * i &lt; n:</span><br><span class="line">    <span class="keyword">if</span> n % i == <span class="number">0</span> <span class="keyword">or</span> n % (i + <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    i += <span class="number">6</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">result = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> queue:</span><br><span class="line">  <span class="keyword">if</span> isPrime(int(num)):</span><br><span class="line">    print(num)</span><br><span class="line">    result = num</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">print(result == <span class="string">'7427466391'</span>)</span><br><span class="line">print(isPrime(<span class="number">7427466391</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>宾果！</p><p><img src="https://image-static.segmentfault.com/361/985/3619857022-1bf6f31eb73f694c_fix732" alt="image-20220115031650305"></p><h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>证明题解答完毕，咱得走个仪式感，访问访问这个网站——7427466391.com。</p><p>结果是502错误……</p><p><img src="https://image-static.segmentfault.com/873/695/873695543-991118b6aeb73177_fix732" alt="image-20220115162556092"></p><p>行吧，看来这个站点早被人家抛弃了，毕竟这个高速公路广告也是谷歌在2004年搞的恶作剧。</p><hr><p>最后，把源码整理了个Kaggle Notebook版本。欢迎查阅！</p><p><a href="https://www.kaggle.com/leslie2wong/first10digitprimefoundinconsecutivedigitsofe" target="_blank" rel="noopener">First10DigitPrimeFoundInConsecutiveDigitsOfE | Kaggle</a></p><h3 id="参考资料汇总"><a href="#参考资料汇总" class="headerlink" title="参考资料汇总"></a>参考资料汇总</h3><ol><li>吴军老师的《浪潮之巅（第四版）》P44</li><li>无理数ｅ的<a href="https://en.wikipedia.org/wiki/E_(mathematical_constant" target="_blank" rel="noopener">维基英文百科</a></li><li>OEIS站点的<a href="https://oeis.org/A001113" target="_blank" rel="noopener">A001113页面</a></li><li><a href="https://oeis.org/A001113/b001113.txt" target="_blank" rel="noopener">Table of 50000 digits of e labeled from 1 to 50000</a></li><li><a href="https://blog.csdn.net/Frost_Bite/article/details/88878063" target="_blank" rel="noopener">素数判定算法</a></li><li><a href="https://blog.csdn.net/O_1CxH/article/details/81627751" target="_blank" rel="noopener">PyCrypto密码学库源码解析（一）随机数和大素数生成</a></li><li><a href="https://www.businessinsider.com.au/what-google-can-teach-us-about-solving-problems-2011-7" target="_blank" rel="noopener">What Google’s Genius Billboard From 2004 Can Teach Us About Solving Problems</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;偶然间，看到吴军老师的《浪潮之巅（第四版）》里有讲到这么一个故事。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google曾经在加州的101高速公路上用大广告牌登了这样的广告：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;{ 无理数e中前十位连续的素数 }.com&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你如果知道这个答案（7427466391.com），就可以通过上述网址进入到Google的招聘网站。而能够计算出这道题，要很聪明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“很聪明”？吴军老师的这句话倒是让人来兴趣了，自己也凑性借助计算机的力量琢磨琢磨下这个证明题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://lesliewong.cn/categories/Python/"/>
    
      <category term="科学计算" scheme="http://lesliewong.cn/categories/Python/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Scientific Computing" scheme="http://lesliewong.cn/categories/Python/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/Scientific-Computing/"/>
    
    
      <category term="Python" scheme="http://lesliewong.cn/tags/Python/"/>
    
      <category term="科学计算" scheme="http://lesliewong.cn/tags/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Scientific Computing" scheme="http://lesliewong.cn/tags/Scientific-Computing/"/>
    
  </entry>
  
  <entry>
    <title>科学计算编程涉及到的技术栈简介</title>
    <link href="http://lesliewong.cn/2020/11/15/common-tech-stack-for-scientific-computing-programming/"/>
    <id>http://lesliewong.cn/2020/11/15/common-tech-stack-for-scientific-computing-programming/</id>
    <published>2020-11-15T12:45:30.000Z</published>
    <updated>2024-01-18T04:57:53.291Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>上半年自己在弄毕业设计时负责的是一个与Python数据分析相关的课题，最终取得了个不错的成绩，觉得其中的技术方案选型部分很有分享出来的价值，对在科学计算（现在流行的说法是数据科学）方面还是一知半解的人起到一个入门科普的作用，故撰写此文。</p><a id="more"></a> <hr><h3 id="2-1-1-科学计算编程语言的比较"><a href="#2-1-1-科学计算编程语言的比较" class="headerlink" title="2.1.1 科学计算编程语言的比较"></a>2.1.1 科学计算编程语言的比较</h3><h5 id="MATLAB语言介绍："><a href="#MATLAB语言介绍：" class="headerlink" title="MATLAB语言介绍："></a>MATLAB语言介绍：</h5><p>Matlab是MathWorks公司开发的科学计算软件，软件模式为本体加扩展工具箱。它具有强大的矩阵计算和数据可视化能力，一方面可以实现数值分析、优化、统计偏微分方程数值求解、自动控制、信号处理等多个领域的数学计算，另一方面可以实现二维、三维绘图、三维场景生成和渲染、科学计算可视化、图像处理、虚拟现实与地图制作等功能[13]。不过，值得注意的是MATLAB是商业性软件，软件售价不菲，而且就软件社区生态来看，目前在数据科学领域越来越不受待见。以“MATLAB Machine Learning”和“python machine learning”作为关键词在谷歌分析中比较[14]，如图2.1所示，会发现MATLAB的数据科学社区活跃度远不及Python数据科学社区。从拥抱活跃的数据科学社区从而方便自己遇到问题时可以寻求解决方案的角度考虑，使用Python显然更有利于课题的后续研究发展。</p><p><img src="https://image-static.segmentfault.com/197/222/197222751-128f4b0a25717554_fix732" alt="img"></p><p><em>图2.1“MATLAB Machine Learning”和“python machine learning”谷歌分析结果比较</em></p><h5 id="R语言介绍："><a href="#R语言介绍：" class="headerlink" title="R语言介绍："></a>R语言介绍：</h5><p>与MATLAB相似，R语言用于数据处理和统计分析，为大多数统计学家所钟爱。R语言脱胎于AT&amp;T实验室开发的统计语言S语言，且与s语言基本兼容[15]。R语言是开源免费的，由一个庞大活跃的全球性研究型社区维护，深受众多统计学家的欢迎。</p><h5 id="Julia语言介绍："><a href="#Julia语言介绍：" class="headerlink" title="Julia语言介绍："></a>Julia语言介绍：</h5><p>Julia是专门为高性能数值计算而设计的高级动态程序设计语言，它在分布式并行化、精确数值计算等方面提供了独特的支持，并包含了大量可扩展的数学函数库。特别是在线性代数、随机数生成、信号处理和字符串处理等领域，Julia集成了许多成熟的、优秀的基于C和FORTRAN的开源库，具有很高的性能和效率[16]。不过，Julia面世于2012年，目前还处于蓬勃发展之中，尽管前景可观，但目前在科学计算领域的普及度还远不如Python。</p><h5 id="Python语言介绍："><a href="#Python语言介绍：" class="headerlink" title="Python语言介绍："></a>Python语言介绍：</h5><p>Python语言诞生于1989年，创始人为Guido Van Rossum。其为一种弱类型的高级动态语言。目前最新版本为3.9。Python开源免费，有着十分活跃的科学计算社区生态，社区活跃度远超R语言社区。由Tiobe公司发布的编程语言排行榜显示，Python排行位置已跃居第三位，而R语言处于第九位，如图2.2。不同于MATLAB、R和Julia等专注于科学计算领域，Python在Web应用开发领域也备受追捧。基于Python编写的Django、Flask等web框架在软件开发领域得到了大规模的应用。从易于将本课题的研究成果最终转化为特定的数据分析解决方案的角度出发，选择Python作为本课题的编程语言显然较其他几种语言更有优势。一致的语言特性，可以显著减少未来成果转化时的学习成本，所以本课题选用Python3.8.2作为统计模型构建分析的编程语言。</p><p><img src="https://image-static.segmentfault.com/410/246/4102461780-6fe1de0d8df42176_fix732" alt="img"></p><p><em>图2.2 Tiobe编程语言排行榜历史数据</em></p><h3 id="2-1-2-开发平台的比较"><a href="#2-1-2-开发平台的比较" class="headerlink" title="2.1.2 开发平台的比较"></a>2.1.2 开发平台的比较</h3><h5 id="PyCharm-17-介绍："><a href="#PyCharm-17-介绍：" class="headerlink" title="PyCharm[17]介绍："></a>PyCharm[17]介绍：</h5><p>Pycharm是由JetBrains打造的Python集成开发环境，具有调试、语法高亮、项目管理、代码跳转、智能提示、自动补全、单元测试、版本控制等强大功能。PyCharm分为社区开源版和专业版，其中专业版提供了支持Django、Flask等框架的Web开发、数据库连接等功能。</p><h5 id="Visual-Studio-Code-18-介绍："><a href="#Visual-Studio-Code-18-介绍：" class="headerlink" title="Visual Studio Code[18]介绍："></a>Visual Studio Code[18]介绍：</h5><p>Visual Studio Code是由微软公司推出的一款轻量级编辑器，其软件架构为平台加插件模式。加载Python插件后，Visual Studio Code可以视为一款十分出色的小型Python IDE，但功能完备性方面相较PyCharm还有不少距离。不过，鉴于其完全开源免费的特性，拥簇者甚众，社区参与度十分活跃。</p><h5 id="Spyder-19-介绍："><a href="#Spyder-19-介绍：" class="headerlink" title="Spyder[19]介绍："></a>Spyder[19]介绍：</h5><p>一款面向Python语言的开源科学计算IDE（Integrated Development Environment），其设计思想类似于MATLAB，模仿了MATLAB的“工作空间”功能，方便观察和修改数组值。 其集成了Numpy、SciPy、Matplotlib等科学计算软件包，内置交互式环境以处理数据，对于数据科学家来说十分友好，且被Python的科学计算发行版Anaconda所收录。项目目标是促进Python在科学和工程领域的软件开发的使用。</p><h5 id="Jupyter-Notebook介绍："><a href="#Jupyter-Notebook介绍：" class="headerlink" title="Jupyter Notebook介绍："></a>Jupyter Notebook介绍：</h5><p>一个基于Web的交互式计算环境，用于创建Jupyter Notebook文档。不同于Spyder的整个Python文件运行后生成交互页面式的交互风格，Jupyter Notebook的交互是基于Python代码块进行的，这意味着用户可以依照自己的意愿有选择性地运行某些代码块并得出结果，相较于Spyder具有更强大的灵活性。和Spyder一样，Jupyter Notebook也被Python的科学计算发行版Anaconda所收录。</p><h3 id="2-1-3-数据库技术的比较"><a href="#2-1-3-数据库技术的比较" class="headerlink" title="2.1.3 数据库技术的比较"></a>2.1.3 数据库技术的比较</h3><h5 id="MySQL-20-数据库介绍："><a href="#MySQL-20-数据库介绍：" class="headerlink" title="MySQL[20]数据库介绍："></a>MySQL[20]数据库介绍：</h5><p>一款高性能、低成本、可靠性好且十分流行的开源数据库，有着二十多年的历史，是目前最好的关系型数据库管理系统之一，广泛应用在互联网上的中小型网站上。随着MySQL的不断成熟，它也逐渐被用于更多大规模的网站和应用。MySQL目前归于Oracle旗下，其数据库查询语言为SQL。</p><h5 id="MongoDB-21-数据库介绍："><a href="#MongoDB-21-数据库介绍：" class="headerlink" title="MongoDB[21]数据库介绍："></a>MongoDB[21]数据库介绍：</h5><p>一种面向文档的数据库管理系统，被定义为非关系型数据库，致力于为Web应用提供可扩展的高性能数据存储解决方案。与MYSQL中的表不同，它支持的查询文档的数据结构非常松散，为类似于JSON的BSON格式，因此可以存储更为复杂的数据类型。MongoDB的特点是强大的查询语言。它的语法遵循面向对象的思想，可以实现类似关系数据库中单表查询的大部分功能，也可以对数据进行索引。</p><h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>以上内容涉及到的技术栈仅仅针对数据集大小为中小规模时的情况，对于大规模或者超大规模的数据集，则需要额外借助一些大数据方面的技术栈，如Apache Hadoop、Apache Hive和Apache Spark等，还请具体情况具体分析。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[5] MATLAB[EB/OL]. <a href="https://www.mathworks.com/products/matlab.html" target="_blank" rel="noopener">https://www.mathworks.com/products/matlab.html</a>, 2020.05.11.</p><p>[6] R[EB/OL]. <a href="https://www.r-project.org/about.html" target="_blank" rel="noopener">https://www.r-project.org/about.html</a>, 2020.05.11.</p><p>[7] Julia[EB/OL]. <a href="https://julialang.org/" target="_blank" rel="noopener">https://julialang.org/</a>, 2020.05.11.</p><p>[10] Anaconda[EB/OL]. <a href="https://www.anaconda.com/" target="_blank" rel="noopener">https://www.anaconda.com/</a>, 2020.05.11.</p><p>[11] Jupyter Notebook[EB/OL]. <a href="https://jupyter.org/" target="_blank" rel="noopener">https://jupyter.org/</a>, 2020.05.11.</p><p>[12] Christian Hill. Learning Scientific Programming with Python[M]. Cambridge University Press, 2015:160-317. </p><p>[13] (美)Holly Moore. MATLAB实用教程（第二版）[M]. 高会生, 对童娜, 李聪聪等译. 北京: 电子工业出版社, 2010:1-2.</p><p>[14] 王树义. 学Python，能提升你的竞争力吗？[EB/OL]. <a href="https://www.jianshu.com/p/4445fe0a7e16" target="_blank" rel="noopener">https://www.jianshu.com/p/4445fe0a7e16</a>, 2020.05.11.</p><p>[15] (美)麦特洛夫(Matloff, N.). R语言编程艺术[M]. 陈堰平, 邱怡轩, 潘岚锋等译, 北京: 机械工业出版社, 2013.6:1-2.</p><p>[16] 魏坤编著. Julia语言程序设计[M]. 北京: 机械工业出版社, 2018.10:1-2.</p><p>[17] PyCharm[EB/OL]. <a href="https://www.jetbrains.com/pycharm/" target="_blank" rel="noopener">https://www.jetbrains.com/pycharm/</a>, 2020.05.11.</p><p>[18] Visual Studio Code[EB/OL]. <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a>, 2020.05.11.</p><p>[19] Spyder[EB/OL]. <a href="https://www.spyder-ide.org/" target="_blank" rel="noopener">https://www.spyder-ide.org/</a>, 2020.05.11.</p><p>[20] MySQL[EB/OL]. <a href="https://www.mysql.com" target="_blank" rel="noopener">https://www.mysql.com</a>, 2020.05.11.</p><p>[21] MongoDB[EB/OL]. <a href="https://www.mongodb.com/" target="_blank" rel="noopener">https://www.mongodb.com/</a>, 2020.05.11.</p><p>（学识浅薄，仅仅介绍， 抛砖引玉，如有讹误，欢迎指出~）</p><p><img src="https://image-static.segmentfault.com/313/445/313445908-1b2e02c13aad86b6_fix732" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;上半年自己在弄毕业设计时负责的是一个与Python数据分析相关的课题，最终取得了个不错的成绩，觉得其中的技术方案选型部分很有分享出来的价值，对在科学计算（现在流行的说法是数据科学）方面还是一知半解的人起到一个入门科普的作用，故撰写此文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://lesliewong.cn/categories/Python/"/>
    
      <category term="科学计算" scheme="http://lesliewong.cn/categories/Python/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Scientific Computing" scheme="http://lesliewong.cn/categories/Python/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/Scientific-Computing/"/>
    
    
      <category term="Python" scheme="http://lesliewong.cn/tags/Python/"/>
    
      <category term="科学计算" scheme="http://lesliewong.cn/tags/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
      <category term="Scientific Computing" scheme="http://lesliewong.cn/tags/Scientific-Computing/"/>
    
  </entry>
  
</feed>
